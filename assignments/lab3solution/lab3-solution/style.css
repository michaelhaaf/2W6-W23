/* 
* Using the :root selector for theming 
* This was not required, but I thought I'd show you how useful/cool it is. 
* You should do this yourself with every project from now on. 
* */
:root {
  --primary: #6200EE;
  --primary-variant: #3700B3;
  --secondary: #03DAC6;
  --secondary-variant: #018786;
  --background: #FFFFFF;
  --foreground: #000000;

  /* 
  * Unfortunately, there's no quick CSS way to add opacity to existing hex colors (there should be soon!) 
  * One way is to define new 8-bit hex colors (RRGGBBAA, where the AA hexes encode the alpha-channel, i.e. the opacity)
  * i.e.:
  *   - #6200EEFF (same as primary color, 100% opacity)
  *   - #6200EE00 (completely transparent)
  *   - #6200EE19 (primary with opacity 19/FF == 6% opacity)
  * */

  --card-bg-1: #6200EE19;
  --card-bg-2: #03DAC619;

  --ff-body: 'Mulish', sans-serif;
  --fs-h1: 44px;
  --fw-h1: bold;
  --fs-h2: 32px;
  --fw-h2: bold;
  --fs-h3: 18px;
  --fw-h3: bold;
  --fs-body: 16px;
  --fw-body: normal;
  --fs-btn: 16px;
  --fw-btn: bold;
  --fs-nav-item: 14px;
  --fw-nav-item: 600; /* semibold is in-between normal (400) and bold (700) */
  --fs-footer: 12px;
  --fw-footer: 600; /* semibold is in-between normal (400) and bold (700) */

  --page-width: 1440px;

  /* values from Hex color to CSS filter calculator: https://isotropic.co/tool/hex-color-to-css-filter/ */
  --filter-black: brightness(0) saturate(100%);
  --filter-primary: invert(13%) sepia(88%) saturate(6911%) hue-rotate(269deg) brightness(84%) contrast(129%);
}

/* Resets */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

img {
  max-width: 100%;
}

/* General */

body {
  margin: 0 auto;
  max-width: var(--page-width);
  font-family: var(--ff-body);
  font-weight: var(--ff-body);
  color: var(--foreground);
  background-color: var(--background);
  line-height: 1.5;
}

h1 {
  font-size: var(--fs-h1);
  color: var(--primary-variant);
}

h2 {
  font-size: var(--fs-h2);
  color: var(--primary-variant);
}

h3 {
  font-size: var(--fs-h3);
  color: var(--primary-variant);
}

/* Utilities */

.flex-container {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 3rem;
}

.flex-column {
  flex-direction: column;
}

.card {
  padding: 4em 10em;
}

.narrow-card {
  padding: 2em 10em;
}

.btn {
  /* Button typography */
  letter-spacing: 0.05em;
  background-color: var(--secondary-variant);
  font-size: var(--fs-btn);
  font-weight: var(--fw-btn);
  /* Button layout/reset */
  border: none;
  padding: 1em 2em;
}

.btn:hover,
.btn:focus {
  cursor: pointer;
  opacity: 0.75;
}

.btn:active {
  transform: scale(0.95);
}

/* Page-specific */

section.card:nth-of-type(odd) {
  background-color: var(--card-bg-1);
}
section.card:nth-of-type(even) {
  background-color: var(--card-bg-2);
}

.page-header {
  justify-content: space-between;
}

.page-header nav {
  font-size: var(--fs-nav-item);
  font-weight: var(--fw-nav-item);
}

.nav-links {
  list-style-type: none;
  gap: 1.5rem;
}

.page-header,
.page-footer {
  color: #FFFFFF;
  background-color: var(--primary-variant);
}

.page-footer {
  font-size: var(--fs-footer);
  font-weight: var(--fw-footer);
}

.hero .flex-column {
  align-items: flex-start;
}

.guarantee-grid {
  flex-flow: row wrap;
  align-items: flex-start;
  gap: 3rem;
}

.guarantee-grid > div {
  width: 300px;

  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  gap: 1rem;

  color: var(--primary-variant);

}

.gallery {
  text-align: center;
}

.gallery h3 {
  color: var(--foreground);
  margin: 0 0 1rem 0;
}

.gallery > figure {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.gallery > figure > img {
  width: 250px;
  height: 250px;
}

.getting-started * {
  max-width: 50%;
  text-align: center;
}

/* 
* This is a cool trick for re-coloring SVG strokes without editting the .svg markup directly.
* I didn't teach you this, so don't worry about having it in your solution. But now you know!
*
* You can use the "filter" property (see Week12 notes)
* Steps: 
*   - filter the .svg so that it is black (baseline)
*   - enter your desired outcome color into a HEX TO CSS FILTER calculator. This works by assuming the input is black
*   - apply both filters
*
*
* */
.guarantee-grid img {
  filter: var(--filter-black) var(--filter-primary);
}

