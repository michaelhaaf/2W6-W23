/*
* || General Styles
*/

:root {
  --primary: #0c8f83;
  --secondary-dark: #252b42;
  --neutral-light: #fff;
  --neutral-med: #d6d6e5;
  --neutral-dark: #585766;

  /* Generic sans-serif font stack. There was no specific font requirement in Lab 4 */
  --font-family: -apple-system, BlinkMacSystemFont, segoe ui, roboto, oxygen,
    cantarell, helvetica neue, ubuntu, sans-serif;

  --font-size-xl: 2.4rem;
  --font-size-l: 1.8rem;
  --font-size-m: 1.2rem;
  --font-size-s: 1rem;
  --font-size-xs: 0.8rem;
}

* {
  margin: 0; /* reset margin/border/padding on all elements. Aggressive, but forces us to create styles consciously. */
  padding: 0;
  border: 0;
  outline: none;
  box-sizing: inherit;
}

body {
  font-family: var(--font-family);
  box-sizing: border-box; /* along with universal selector, force all blocks to use border instead of content size */
}

ul,
ol {
  list-style: none; /* remove default list-item dot/numbering */
}

a {
  text-decoration: none; /* remove default hyperlink underline/color */
  color: inherit;
}

img,
video {
  max-width: 100%; /* contrains img/video from stretching beyond the width of the parent container. */
}

button,
input {
  outline: none; /* reset browser defaults for buttons and form inputs */
  border: none;
  background: none;
  color: inherit;
  font-size: inherit;
  font-family: inherit;
}

/* [attr="value"] is called an Attribute selector. 
* This selects HTML elements who (1) match the overall selector (2) have the attribute in question (3) with the specified value
* We didn't cover these in class, but they are handy sometimes */
input[type="search"] {
  width: 100%; /* force search bar to take 100% of parent width */
  font-size: var(--font-size-m);
  padding: 0 1em; /* left/right padding to bring text away from left/right border */
}

h1 {
  font-size: var(--font-size-xl);
}

h2 {
  font-size: var(--font-size-l);
}

/*
* || Utilities -- styles we may reuse on multiple elements. Named for what they "do", not what they "are"
*/

.content-container {
  padding: 1em;
}

.flex-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 0.5em;
}

.flex-grow {
  flex: 1;
}

.grid-container {
  display: grid;
  gap: 1em;
  margin: 1em 0;
}

.grid-item {
  position: relative;
  display: flex; /* a grid-item can itself be a flex-container (makes centering the play icon automatic) */
  justify-content: center;
  align-items: center;
}

.grid-item .play {
  position: absolute;
  width: 10%;
}

.grid-item .vid {
  width: 100%; /* force videos to take 100% of parent size. */
  height: 100%; /* My solution isn't great, really, because the image will lose its aspect ratio */
  object-fit: cover;
}

/* 
* || Components -- identifiable elements on our page that we may reuse (buttons are classic examples)
*/

.btn {
  padding: 0.5em 1.5em;
  border-radius: 0.25em;
  cursor: pointer;
  font-weight: bold;
}

.btn--accent {
  background-color: var(--primary);
}

.btn--neutral {
  background-color: none;
  color: var(--secondary-dark);
  border: 1px solid var(--neutral-med);
  box-shadow: 1px 1px 2px var(--neutral-med);
}

.btn:hover {
  filter: opacity(0.9);
}

.btn:active {
  transform: scale(0.9);
}

.nav {
  padding: 1em;
  gap: 1em;
  font-size: var(--font-size-m);
  font-weight: bold;
}

.nav ul {
  gap: 2em;
}

.nav--page {
  background-color: var(--secondary-dark);
  color: var(--neutral-light);
  gap: 2em;
}

.nav--right {
  font-weight: normal;
}

.nav--tabs {
  justify-content: center;
  background-color: var(--neutral-light);
  color: var(--secondary-dark);
  box-shadow: 0 1px 2px var(--neutral-med);
}

.current-tab {
  font-weight: 700;
  color: var(--neutral-light);
  background-color: var(--secondary-dark);
  padding: 0.5em 1em;
  border-radius: 1em;
}

.nav--tabs a:hover {
  filter: brightness(0);
}

.nav--page a:hover,
a.current-tab:hover {
  filter: opacity(0.8);
}

.hero-container {
  justify-content: center;
  position: relative;
  width: 100%;
  padding: 12em 1em;

  overflow: hidden;
  color: var(--neutral-light);
  background-color: rgba(0, 0, 0, 0.5);
}

.hero-container form {
  width: 100%;
  max-width: 650px;
}

.hero-container video {
  object-fit: cover;
  height: 100%;
  width: 100%;
  position: absolute;
  z-index: -1;
}

.hero-container a {
  position: absolute;
  bottom: 1em;
  right: 1em;
}

.hero-container .search-bar {
  margin: 1em 0;
}

.hero-container p {
  font-size: var(--font-size-s);
}
.hero-container p::before {
  font-weight: bold;
  content: "Trending: ";
}

.search-bar {
  display: flex;
  align-items: center;
  border-radius: 0.5em;
  background-color: var(--neutral-light);
  color: var(--neutral-dark);
  max-height: 3rem;
}

.search-bar {
  max-width: 650px;
}

.search-button {
  padding: 1em;
  cursor: pointer;
}

.section-header {
  align-items: flex-end;
  color: var(--secondary-dark);
}

/*
* || Media queries 
*   Note: there are a few different ways to do this. I chose a device-based class system. It was also possible to select the necessary elements at each device width, rather than marking up which elements appear at which device size. I've provided the Winter2021 solutions as well -- you can check them out for an example.
* */

.desktop {
  display: none;
}

.tablet {
  display: none;
}

.large-tablet {
  display: none; /* This breakpoint (at 857px) wasn't actually in the requirements, but it was in the solution gifs I showed. My bad. It's not required, but in case you wanted to see it working: */
}

.mobile {
  display: initial; /* Note: the order matters! Don't forget about specificity */
}

@media screen and (min-width: 594px) {
  .mobile {
    display: none;
  }

  .tablet {
    display: initial;
  }

  .grid-container {
    grid-template-columns: repeat(2, 1fr);
    grid-auto-rows: 1fr;
  }

  .grid-item.two-row {
    grid-area: span 2;
  }
}

@media screen and (min-width: 857px) {
  .tablet {
    display: none;
  }

  .large-tablet {
    display: initial;
  }
}

@media screen and (min-width: 1077px) {
  .large-tablet {
    display: none;
  }

  .desktop {
    display: initial;
  }

  .grid-container {
    grid-template-columns: repeat(3, 1fr);
  }
}
