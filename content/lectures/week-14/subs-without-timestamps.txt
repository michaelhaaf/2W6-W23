

 
what's going on guys so another year has
 
passed and it's hard to believe that
 
I've been doing this video for six years
 
now so for those of you that don't know
 
what this is It's a video I do every
 
year where I basically talk about every
 
technology in web development from
 
programming languages to Frameworks to
 
tools and Concepts basically everything
 
that I can think of and I lay it out in
 
a linear order so that you can create a
 
plan of what you want to do and what you
 
want to learn now this year it's I I was
 
a little more long-winded because I
 
wanted to talk more about things instead
 
of just saying well you know these are
 
the front end Frameworks these are the
 
back end Frameworks there's so many
 
videos like that I wanted to just
 
elaborate more on stuff so it's it's
 
longer than I had anticipated it's
 
almost three hours long but you don't
 
have to sit here and watch it from
 
beginning to end you can obviously you
 
know watch a little here and there you
 
can skip around I'm going to have time
 
stamps with every single section down in
 
the in the description so it's don't let
 
it overwhelm you obviously you're not
 
going to learn everything in this guide
 
I don't think that's even possible but I
 
want you to use it so that you can kind
 
of pick and choose what you want for
 
what you actually want to do whether
 
that's a full stack developer a
 
front-end developer or whatever all
 
right so hope you guys enjoy let's go
 
ahead and get into it now I just want to
 
go over a couple things about this video
 
so one it's not a Trends video I do add
 
in some current trends but it's an
 
all-around road map starting from the
 
very beginning even with things like
 
text editors and browsers so it's very
 
beginner friendly I don't assume that
 
you know anything at all this video
 
doesn't focus on a specific path or a
 
specific set of Technologies we look at
 
everything and I just try and guide you
 
into choosing your own path in terms of
 
Technologies you may want to be you know
 
a front-end JavaScript developer that
 
works with react and it's ecosystem or
 
you might want to be a python developer
 
that creates apis and microservices with
 
Django or flask it's really up to you on
 
what you choose there's no one-size-fits
 
all now as far as my own opinion goes I
 
try to keep this video very objective
 
however a lot of people do ask me what I
 
use and what I suggest so you will
 
occasionally see something underlined or
 
in bold and that just means that that's
 
what I personally prefer so don't put
 
too much into that because I'm just one
 
person
 
and feel free to skip around I'm going
 
to have time stamps for every section I
 
know some of you have watched this every
 
year so you might want to skip around to
 
certain parts it is a very long video so
 
you may want to just listen to it like
 
you would a podcast while you're driving
 
or something like that and then a couple
 
things I want to mention in addition to
 
this video I created a Content guide on
 
my website which has just a list of
 
YouTube videos and courses that
 
correspond to the Technologies and the
 
topics in this video in the same order
 
so you can use that as kind of a
 
supplement to this video and then I also
 
have a premium 300 plus page ebook that
 
is essentially a written version of this
 
guide that goes a little more into
 
detail and covers a little more about
 
each technology and has some other
 
topics as well and that's just 9.99 I'll
 
put a link to in the description if
 
you're interested in that
 
all right so before we get into certain
 
Technologies let's look at some of the
 
reasons why you may want to learn to
 
code I think this is the first step in
 
creating a plan what you choose as far
 
as Technologies is going to vary
 
depending on what your overall goal is
 
so the first one is career advancement
 
meaning you want to work for a company
 
as a developer it could be a tech based
 
company or anything really developers
 
are needed in a variety of Industries
 
including Tech Finance Health Care Etc
 
and this seems to be the the most common
 
goal among my viewers and just
 
developers in general
 
now I'd say freelancing is the second
 
most popular goal with the rise of of
 
gig economies and remote work many
 
people are turning to freelancing as a
 
way to earn money on their own terms and
 
as a freelancer you can offer your
 
programming services to clients around
 
the world
 
you would probably start out on your own
 
but you could end up building your own
 
agency which is what I ended up doing
 
and I actually found some some real
 
success within it and you could offer
 
General web dev and Design Services or
 
you could Niche down and specialize in a
 
certain area
 
so another area of Entrepreneurship is
 
creating products such as a SAS or
 
software as a service and this does take
 
a ton of time and effort and money and I
 
do think it's the riskiest of the three
 
but I I also think if you find success
 
it can really pay off even more than
 
than the other ones here my advice would
 
be to start with this as like a
 
secondary goal and then later on if you
 
see the potential you could then you
 
know move to It Do It full time I think
 
educational content which is what I do
 
also falls into this area because you're
 
creating a product
 
so some people learn programming simply
 
because they have a personal project
 
that they want to build or they enjoy it
 
as a hobby and that's absolutely fine
 
money doesn't always have to be your end
 
goal you may even just start programming
 
as a hobby and then switch to one of the
 
other areas later on I also put future
 
proofing because technology is
 
constantly advancing I think now with AI
 
and some of the new tools that are
 
coming out it just shows you that the
 
future is technology and programming
 
skills are always going to be in high
 
demand and by learning programming
 
whether it's web development or some
 
other area you're investing in your
 
future and you're positioning yourself
 
for success and you may have another job
 
right now you may not even plan to work
 
as a developer anytime soon but it's a
 
great skill to have
 
okay so continuing on with goals you
 
should decide which type of web
 
developer you want to be the three types
 
are front end back end and full stack
 
and we're going to be talking about
 
technologies that all three of these use
 
and I'm going to do what I did a couple
 
years ago and color code the the topics
 
and the Technologies so we'll have blue
 
for front end red for back end and green
 
for full stack all right just to just to
 
kind of categorize all of the different
 
Technologies all the different
 
Frameworks and languages and so on and
 
make it a little easier to to understand
 
all right so a front-end developer is
 
someone that specializes in the
 
user-facing aspect of web development so
 
the technologies that I put here are
 
examples of what you may use as that
 
type and you definitely don't need to
 
know every single thing I put in these
 
columns also I'm not going to really
 
explain them right now we're going to
 
talk about them throughout the span of
 
this video but you'll need to know of
 
course HTML and CSS and you'll typically
 
need to know how to create Dynamic Pages
 
learn a front-end framework understand
 
how to consume apis and so on as far as
 
backend goes you're going to be focusing
 
on the server side of web development so
 
working with databases servers apis and
 
back-end developers are responsible for
 
the most of the functionality of a
 
website making sure it works correctly
 
and efficiently they use languages like
 
JavaScript using node.js PHP Ruby Python
 
and and just about any other language
 
and then databases like MySQL postgres
 
mongodb back-end developers have nothing
 
to do with the the user interface or
 
what the user sees on a website
 
then you have a full stack developer
 
which has a broad range of skills
 
including both front end and back-end
 
development and they have a good
 
understanding of dynamic interfaces as
 
well as back-end logic working with
 
databases creating apis use using HTTP
 
Etc and this is a full stack guide which
 
includes both front end and back-end
 
Technologies we're going to start off
 
with the front end and then move to
 
back-end languages and so on for the
 
first half of this guide it's going to
 
be very very JavaScript heavy and the
 
reason for that is because JavaScript is
 
the language of the front end of the
 
client side so when you get into
 
server-side development you can use
 
almost any programming language because
 
that stuff isn't running in the browser
 
or on the client
 
all right so as far as tools and
 
Technologies we're going to start at the
 
very beginning here so what are the
 
highest level basic tools for web
 
development so of course you need a
 
computer I mean you can write code on a
 
mobile device but I wouldn't recommend
 
it I do get a lot of questions about the
 
type of system that you need to start
 
programming with you actually don't need
 
much especially for web development
 
where you're most likely not running any
 
hardcore compilers or working with
 
intense 3D Graphics or anything like
 
that I'd say just something with at
 
least eight eight gigabytes of RAM and
 
pretty much anything built within the
 
last 10 years can be used for basic web
 
development you do not need a twenty
 
five hundred dollar MacBook Pro as far
 
as operating systems it's really up to
 
you you can use Windows Mac OS Linux
 
unless you're writing platform specific
 
code like if you're creating iOS apps
 
with swift then you're going to need a
 
Mac but other than that with web
 
development pretty much everything is
 
going to be cross-platform so it's just
 
just a matter of preference I use all
 
three I prefer Mac OS so that's my main
 
machine for coding but I I do write code
 
on Windows I use Linux I don't really
 
write code on it but I use it to manage
 
my servers both both local and remote
 
servers but again it's just it's
 
completely up to you when it comes to
 
operating system
 
so you're going to need something to
 
write code with and that would be a text
 
editor or an IDE which is an integrated
 
development environment with most web
 
development projects you don't really
 
need a hefty IDE I'd say Visual Studio
 
code is the most popular when it comes
 
to web development especially front-end
 
development it's a text editor but it's
 
very intuitive it has a ton of
 
functionality it has great extensions
 
and customization that's what I use
 
that's what I would suggest some others
 
are Sublime Text which is another one
 
that I use for a couple years
 
technically it's a paid editor but
 
there's basically a never-ending trial
 
although I would suggest paying for it
 
if you're going to use it for any amount
 
of time Adam is another open source
 
powerful editor with a ton of extensions
 
and then you also have Vim which seems
 
to be pretty popular especially with
 
Linux users it's definitely more
 
complicated as it's more of a command
 
line editor however it's very powerful
 
very customizable level and the people
 
that use it seem to really love it
 
another thing that I want to mention
 
that is helpful is to learn how to
 
navigate your code or navigate your
 
editor so shortcuts learn how to skip
 
lines how to go right to the end or the
 
beginning of a line how to move lines up
 
and down without having to reach for
 
your mouse to learn how to do it within
 
your keyboard and a lot of them are are
 
I guess Global a lot of the same
 
shortcuts in vs code will work for
 
Sublime Text so it is very helpful to to
 
learn that it makes your development
 
much more efficient and much faster when
 
it comes to browsers Chrome seems to be
 
the most widely used for developers
 
Firefox beings the second I'm seeing a
 
lot of developers use Edge a lot lately
 
because it is chromium based Safari
 
Opera brave brave is one that I haven't
 
used yet I'm not sure how developer
 
friendly it is but I I believe it does
 
run on chromium but just about every
 
browser has what we call developer tools
 
where you can see your HTML CSS you can
 
edit it locally you have your JavaScript
 
console for debugging you can see local
 
storage and cookies and any data that's
 
saved in the browser the network tab to
 
show you requests and response so you
 
want to get familiar with those Dev
 
tools now as far as the terminal goes
 
it's not something you're going to need
 
to to learn when you're first starting
 
out however as you progress you'll
 
eventually need to type some commands
 
into the terminal even as a front-end
 
developer you'll often use npm which is
 
the JavaScript package manager you'll
 
also be using git for Version Control
 
although there there are GUI tools for
 
that but I would say that if you're
 
using Mac or Linux then the the default
 
terminal is just fine it's usually
 
either bash or Z shell but for Windows
 
you have the CMD command line or
 
Powershell which are both proprietary so
 
when I use Windows I usually download a
 
tool called git bash which is a Unix
 
based based terminal you also have the
 
ability to use the windows subsystem for
 
Linux but that's probably not something
 
that beginners are going to use so if
 
you're a beginner and you want something
 
that is UNIX based I would suggest get
 
bash for Windows and then hyper is
 
another cross-platform terminal that you
 
can use it has a bunch of plugins and
 
you can really customize your interface
 
okay so now that you know your overall
 
goal as a developer and you have your
 
basic tools ready let's get into the
 
first and arguably the most important
 
two technologies in web development and
 
that's HTML and CSS in fact even if you
 
plan on solely being a back-end
 
developer I'd still recommend learning
 
the basics of HTML and CSS these are the
 
two building blocks of the web at least
 
of the the Visual Web so everything that
 
you see in a website or an application
 
UI in the browser it's brought to you by
 
HTML and CSS there's other things that
 
make it function but these are the two
 
building blocks and usually the the the
 
first two things that you learn when you
 
get into web development so as far as
 
HTML you're going to learn how to layout
 
an HTML5 page with common tags and
 
attributes this will include the doctype
 
head body tags headings paragraphs image
 
tags with Source attributes things like
 
that meta tags for SEO and so on it's
 
also important that you learn and use
 
HTML5 semantic tags like header footer
 
section aside rather than just using
 
divs with IDs this will make your
 
website much more accessible and easier
 
to understand for search engines and
 
Screen readers and it provides a more
 
clear meaningful information about the
 
structure and content of your websites
 
when it comes to IDs and classes you're
 
going to know when to use which so
 
there's no set set in stone rules when
 
it comes to this but IDs are meant for
 
Unique elements and typically to
 
reference elements from your JavaScript
 
or reference elements from your HTML in
 
your JavaScript I should say and then
 
classes are for styling and you can have
 
multiple elements with the same class so
 
start with the fundamentals of CSS this
 
is going to include things like font
 
Styles colors margin and padding
 
positioning you want to get familiar
 
with the Box model which is the concept
 
that every HTML element is considered a
 
rectangular box that contains content
 
and this will include the border the
 
padding the margin and so on and
 
understanding the Box model is essential
 
for controlling layout and spacing of
 
your elements another important concept
 
to learn is CSS specificity so
 
specificity determines which style rules
 
are applied to an element when there's
 
multiple conflicting Styles and
 
specificity is based on the selectors
 
that are used to Target the element each
 
selector has a specific weight that
 
determines its priority so for example
 
if you have an ID selector that has a
 
higher weight than a class selector and
 
a class selector has a higher weight
 
than just the element selector so you
 
want to understand that so that you
 
don't have a bunch of instances of the
 
important flag to kind of overwrite
 
specific specificity of trouble saying
 
that sometimes another thing you want to
 
learn is two things that absolutely
 
change the game for CSS and that's
 
flexbox and CSS grid so these two are
 
they they make CSS easy to create
 
layouts with and before that we had to
 
use floats and I went a few quite a few
 
years creating layouts with floats and
 
it was an absolute nightmare so those of
 
you that are newer to front-end web
 
development you really don't know how
 
lucky you have it because flexbox and
 
CSS grid they might be a little
 
overwhelming at first but they're really
 
easy to work with once you just you get
 
the general gist of it down so those are
 
two things you definitely want to learn
 
pretty quick all right so once you can
 
create layouts for desktops you'll want
 
to get into Mobile layouts and
 
responsiveness responsiveness is the
 
ability of a website to adjust its
 
layout and its content based on the size
 
and the orientation of the device that
 
it's being viewed on every year more
 
people are View doing websites on their
 
devices and it's crucial that your
 
websites are optimized for mobile
 
viewing okay there's tools that that can
 
help you out with this such as the dev
 
tools built into the browser so in
 
Chrome for instance you can toggle the
 
device toolbar and see the site not only
 
on different sizes but with specific
 
devices so if you want to see it on an
 
on an iPhone 8 or on a Galaxy or some
 
other device on tablets you can do that
 
through the dev tools and CSS media
 
queries are at the heart of responsive
 
web design they allow you to specify CSS
 
styles that only take effect when the
 
viewport is in a certain range so for
 
mobile devices you could apply a media
 
query for let's say 600 pixels or less
 
and media queries may sound overwhelming
 
but they're actually pretty easy to work
 
with so these are what I would say are
 
they the absolute needed Concepts and
 
features to learn with CSS once to get a
 
grasp on this stuff you can move on to
 
things like animations and Transitions
 
and making your your your designs more
 
more Dynamic and then there's a bunch of
 
new features in CSS or coming to CSS I
 
should say things like logical
 
properties dock mode media queries
 
scroll snap which allows you to specify
 
the scrolling behavior of your web page
 
we also have some new pseudo classes
 
like is where and has that allow you to
 
be more concise and dynamic with your
 
selecting so and we're going to have
 
nesting so there's there's a lot coming
 
to CSS it's moving much quicker than it
 
used to I mean we went years and years
 
with what seemed like nothing being
 
added to CSS but now it seems like it's
 
starting to pick up again
 
all right so every other year I've put
 
things like SAS and CSS Frameworks
 
before JavaScript and after thinking
 
about it this year since CSS Frameworks
 
are pretty much optional and SAS is
 
definitely optional I think after
 
learning HTML and CSS you should jump
 
right into JavaScript and notice I have
 
backend here as well I have the red box
 
and I would say it's optional for the
 
back end but if you plan on going into
 
PHP or Python and let's say you're going
 
to use like template engines with PHP
 
blade templates or something like that
 
that's all well and fine but if you want
 
any Dynamic interactive
 
aspects of your UI then you're going to
 
have to know some JavaScript if you only
 
plan on building apis and dealing with
 
Json data and microservices stuff like
 
that then you can probably skip
 
JavaScript if you're going right into
 
some other language I think a lot of
 
people jump into front-end frame works
 
like react too quickly it's important to
 
understand the fundamentals of
 
JavaScript so you want to start with the
 
basics you know functions Loops
 
conditionals things like that you want
 
to understand the browser environment
 
and the window object all the different
 
methods and apis that are in the window
 
object obviously you're not going to
 
learn all of that right now at this
 
point but just understand that that
 
stuff is separate from the actual
 
JavaScript engine from the the core
 
language and then you want to learn
 
about the Dom which is the document
 
object model this is the interface in
 
the browser that represents the
 
structure of a web page as uh basically
 
like a tree of nodes or a tree of
 
objects and the Dom provides a way for
 
you to manipulate the content and the
 
style of a web page using JavaScript
 
understanding the Dom is crucial as a
 
front-end or full stack developer so you
 
want to learn to add to remove from
 
Traverse the Dom manipulate styling
 
learn how to listen for events and
 
create Dynamic elements button clicks
 
form submissions things like that okay
 
and in 2015 there was a major update to
 
JavaScript called es2015 or es6 this
 
included things like Arrow functions
 
classes template literals destructuring
 
I would say that all that stuff all
 
those things that were added are now
 
crucial to know in modern JavaScript so
 
you definitely want to learn that stuff
 
and then array methods so you should
 
learn these high order array methods
 
like for each filter map reduce this
 
will help you be able to manipulate
 
arrays and perform complex operations on
 
their elements
 
and then at its core JavaScript is
 
synchronous single threaded language
 
which means that everything is executed
 
line by line one after another however
 
we do have ways to work with and write
 
asynchronous code in JavaScript which is
 
important especially when you're working
 
with web applications that rely on HTTP
 
requests to load data and content so you
 
want to get familiar with things like
 
callbacks promises if you're going to
 
make HTTP requests to some kind of API
 
or back end then you need to learn the
 
fetch API that allows you to make
 
requests over HTTP without reloading the
 
page this will include learning Json
 
which is the format that is used when
 
sending data between client and server
 
okay so now we come to some optional
 
tools that can extend the capabilities
 
of CSS so SAS stands for a syntactically
 
awesome style sheets and it's what we
 
call a CSS preprocessor so we create
 
these files with either a DOT SAS or dot
 
scss extension and we can write not only
 
CSS but added functionality such as
 
nesting variables functions mix-ins some
 
of these features like variables are
 
already in Native CSS however SAS
 
variables are much more elegant than CSS
 
custom properties at least in my opinion
 
CSS will also have nesting soon so I
 
think the need for SAS is less and and
 
will be less than what it used to be but
 
I think it's still worth learning
 
because it's really easy to learn you
 
could you could pick it up in like a
 
weekend now the browser doesn't read SAS
 
files so the way that this works is you
 
use something called a SAS compiler
 
which will take those files with that
 
special syntax and compile it into
 
regular CSS and there's all types of
 
compilers from command line tools to GUI
 
programs there's also compilers that can
 
integrate right into your tooling if
 
you're using something like webpack and
 
we'll talk more about that later so
 
there's also something called post CSS
 
which can do a lot of the same stuff
 
that SAS can do and more it's just
 
implemented in a different way it's
 
implemented via JavaScript plugins so if
 
you wanted to like Minify your CSS or
 
automatically add prefixes or something
 
like that you can install those plugins
 
so post CSS does have a learning curve
 
and it's usually used in your tooling
 
and environment with something like
 
webpack so I think at this point it
 
would be more beneficial to learn SAS
 
just because it's really simple to get
 
up and running and again you could just
 
learn it in a weekend it's I would say
 
it's optional but it can help you out
 
so CSS Frameworks are another useful
 
tool for front-end and full stack
 
developers and again just like I said
 
with JavaScript you want to make sure
 
you you learn enough CSS before you jump
 
into a framework so these can save you a
 
lot of time because they come with
 
pre-existing classes and components that
 
you can use to speed up your development
 
they're also great for people that
 
aren't really good with design
 
themselves and creating uis and they're
 
good for prototyping if you just need a
 
quick layout so with Frameworks like
 
bootstrap if you want to really
 
customize things like colors fonts
 
rounded corners and stuff like that then
 
you're going to need to learn SAS
 
because you basically need to change
 
those values and then recompile the
 
bootstrap CSS to include your
 
customizations as far as what is
 
available I put the most popular
 
Frameworks here which are Tailwind
 
bootstrap I would say materialize in
 
balma but the two top ones right now are
 
tailwind and bootstraps so I would
 
definitely suggest learning one of those
 
two if you're going to jump into a CSS
 
framework now the big difference between
 
tailwind and bootstrap is that Tailwind
 
is very low level it's a utility
 
framework meaning that you have classes
 
to do certain things like set sizes
 
margins padding borders Etc so you end
 
up with a ton of classes in your HTML
 
with which seems like a lot of people
 
hate it first however you can really
 
customize your layouts because you're
 
not stuck with the same old alert and
 
card classes such as what you get with
 
with a framework like bootstrap now
 
there's pros and cons to both with
 
bootstrap you don't have to write as
 
much CSS but it's more component based
 
than utility based so if you need an
 
alert or you just want a like a card
 
class or something like that you have
 
those pre-defined Styles now bootstrap
 
also has some great JavaScript
 
components like modals and accordion
 
menus that that can save you a lot of
 
time because you don't have to create
 
them from scratch and if you don't know
 
a lot of JavaScript then it's great
 
because you can just Implement them
 
really easily so for me I prefer a
 
Tailwind for projects that need a really
 
customized UI but bootstrap for
 
something where I need to create a
 
layout fast especially if I want to use
 
modals and stuff now some other options
 
are materialized which uses Google's
 
material design style guide I really
 
love the look of materialize it does
 
also have JavaScript components it's
 
just not as popular as the other two
 
Bulma is a super lightweight fast
 
modular framework that has a pretty easy
 
learning curve so that's something else
 
you might want to look into the nice
 
thing about these Frameworks is that
 
once you learn one it's pretty easy to
 
learn others a big part of it is just
 
using certain class names which you can
 
always look up so it's not like you have
 
to remember every single class name
 
other than that you just need to know
 
how to set up and customize your layouts
 
when using these
 
all right so let's just quickly talk
 
about design because
 
it depends on what you're doing as if
 
you need to be good with design or not
 
or understand UI design if you're if
 
you're a front-end developer at a
 
company like Amazon or Microsoft or
 
something like that then you're probably
 
going to have other departments that do
 
everything that has to do with creating
 
uis and ux and then it's your job to
 
basically take that design and make it
 
function turn it into a user interface
 
that works in the browser however if
 
you're going to be a freelancer then you
 
pretty much need to know how to build a
 
website Soup To Nuts so you need to
 
understand how to create layouts and
 
there's some basic principles that you
 
need to know now I'm of the opinion that
 
even if you do plan on being a front-end
 
developer at a large company and you're
 
not really going to deal with with the
 
design stuff you should still know some
 
basic principles I've I've been asked to
 
review a lot of websites and sometimes
 
it baffles me when people have like
 
they'll have their elements all squished
 
together and and they don't realize that
 
just that little bit of margin that
 
little bit of spacing or white space
 
would make their site look so much
 
better or they'll have a big hero image
 
and the text is unreadable and all they
 
have to do is put a a an overlay and it
 
would make it look so much better so
 
there's just a couple things that I
 
think every front-end developer should
 
understand so we have scale which is the
 
sizing of elements relative to other
 
elements around it white space which
 
pertains to the spacing around elements
 
again you don't want to have your your
 
elements all smushed together you want
 
to have the right amount of margin in
 
between each element color and contrast
 
is a big one you want to make sure all
 
your text is readable if you do have
 
like a hero image and you have text over
 
it make sure your overlay is dark enough
 
so that you can actually read the text
 
all right visual hierarchy so arranging
 
your are elements in order of importance
 
we have topography which is text type
 
faces and font Styles things like that
 
and then alignment and flow so direct
 
the user's eyes to where they need to be
 
I think if you understand these these
 
basic design principles it'll help you
 
as a front-end developer and Gary
 
Simon's Channel design course is
 
actually really good for this type of
 
stuff
 
so as far as creating design mock-ups
 
and using design software again it
 
depends on what you're doing but I think
 
you should at least know the basics of
 
one of these programs just how to create
 
a very basic layout how to slice up
 
images things like that and you have a
 
bunch of options I personally like Adobe
 
XD I used Photoshop for years when I was
 
freelancing and and not just Photoshop
 
but also illustrator and I've just
 
always went towards Adobe products so
 
I'm comfortable with XD however figma is
 
really popular right now and that's
 
probably what I would recommend for most
 
people it's free it's browser based so
 
it's obviously it's cross-platform it's
 
great for collaboration there's just
 
there's a lot of good things about figma
 
that's probably what I'd recommend
 
sketch is also great but I do believe
 
that it's Mac only at least for creating
 
and editing documents and then Envision
 
is one that I've seen a lot of late I've
 
been working with a lot of designers for
 
things like ebook covers and things for
 
the website and a lot of them are using
 
Envision and the documents that they
 
send me are really really cool so that's
 
something to look into and then you also
 
have wireframing Solutions as well if
 
you don't want to create a whole mock-up
 
but you just want like a quick layout uh
 
you know an outline of a website
 
envisions also good for that but there's
 
also mock-ups moq UPS Lucid charts which
 
I actually use for diagrams and charts
 
balsamic
 
wireframe CC so there's a ton of
 
different tools out there I actually
 
have a I have a GitHub repo with uh I
 
don't even know how many resources are
 
on it but it's called design resources
 
for developers and it has just any kind
 
of design
 
tool that you can think of that's free
 
is on that is in that repo it almost has
 
50 000 Stars so I'll put that link in
 
the description option if you're if
 
you're interested in that as well
 
all right so we've talked about some of
 
the main Technologies of the front end
 
HTML CSS JavaScript there's other
 
Essentials essential tools that you'll
 
learn along the way that are not going
 
to take you as long to learn but they're
 
still essential so we'll start with Git
 
and GitHub so Version Control is very
 
important that's something that you're
 
absolutely going to need to know as a
 
developer it allows you to track your
 
changes manage multiple versions of your
 
code save your progress collaborate with
 
others and much more and there's a few
 
options other than get for Version
 
Control such as subversion but I rarely
 
see anyone using that anymore so git is
 
by far the most common solution and it
 
can get overwhelming when you get into
 
the the less common commands but to
 
start out just learn the basics you know
 
add commit push clone and I know that
 
there's there's GUI tools for git as
 
well so there's desktop tools there's um
 
vs code has get integrated with it you
 
can use that as well but I would still
 
suggest learning the basic commands in
 
the command line I have a crash course
 
on get and GitHub it's a little bit
 
older but it's all extremely relevant
 
it's all the same commands and so on so
 
the browser Dev tools we talked about
 
those a little bit those are extremely
 
important for our front end and full
 
stack developers all modern browsers
 
have them for instance in Chrome you can
 
hit F12 on Windows or command option I
 
on a Mac and you'll open up the tools
 
it's a tabbed interface that splits up
 
into different tasks so you have the
 
elements tab which is to view and edit
 
the HTML and CSS obviously if you edit
 
it it's just locally on your machine you
 
have your JavaScript console which is
 
important for errors and debugging the
 
network tab will show every request that
 
is sent to the server and the response
 
that is sent back and this is
 
unbelievably useful to see what's going
 
on between the client and server and you
 
can use the application tab to see
 
anything that's in your client-side
 
storage such as cookies local and
 
session storage so you definitely want
 
to learn at least those tabs early on
 
next we have npm or the node package
 
manager and you won't need this at the
 
very beginning of Learning JavaScript
 
but it's good to get your feet wet and
 
start experimenting with it so npm is a
 
package manager we can install different
 
packages whether it's a library a
 
framework or just some kind of tool to
 
use in your project I believe there's
 
something like 1.4 million open source
 
packages in the npm registry so to use
 
npm you do have to install node.js on
 
your system which is really simple if
 
you're a front-end developer you may
 
never use node.js itself as a runtime
 
but you will use npm and that includes
 
installing most of the front end
 
Frameworks you use npm so markdown is a
 
lightweight markup language for creating
 
and formatting text it's something that
 
you should probably learn along with Git
 
because the main readme files are marked
 
down so these are files that have an uh
 
dot MD extension and you can literally
 
learn markdown in a day the syntax is
 
very simple and you can just go to
 
markdownguide.org and it has basically a
 
cheat sheet for the syntax
 
so modern text editors and Ides have a
 
system for plugins or extensions which
 
do just that they extend the
 
functionality of the editor and most
 
developers have a suite of extensions
 
that they use in their environment so I
 
use vs code and there's some some common
 
extensions and features that I use so
 
Emmett is an incredible tool for HTML
 
and CSS where you can use short Snippets
 
to write much faster for instance if you
 
want to have a div with a class you can
 
just say dot and then the class name and
 
then hit enter or tab now vs code by
 
default includes Emmett so you don't
 
have to install it as a plug-in or
 
anything but for some other editors like
 
atom Sublime Text I do believe you have
 
to install it live server is also a
 
great extension for vs code that I use
 
it basically just gives you a quick
 
development environment and it it
 
reloads the page automatically anytime
 
you save so it's really helpful for
 
small projects prettier and Es lint are
 
used for code format formatting and
 
linting bracket pair colorizer will give
 
you color matched brackets curly braces
 
parentheses other than that I would
 
suggest specific language and framework
 
extensions for example if you're going
 
to use PHP you probably want to use
 
something like the PHP in I think it's
 
called intellifents yeah intellifents
 
extension if you use react you'll want
 
to use something like the react Redux
 
Snippets extension this will help you
 
out immensely with code highlighting
 
intellisense and all that now whether
 
you're making requests from the front
 
end to a server or you're creating a
 
server or both you need to be familiar
 
with HTTP clients which are tools that
 
can make HTTP requests your browser is
 
one of those tools obviously and you
 
have the network tab to see exactly
 
what's going on with the request and
 
response points now you may need
 
something more powerful like Postman
 
this is a desktop utility that lets you
 
make any kind of HTTP request including
 
post put delete Postman is essential for
 
me when it comes to back end and full
 
stack development but it can be useful
 
for front end as well so if you need to
 
see if you need to test the response of
 
a back end or a public API you can use
 
Postman you could also use Curl which is
 
a command line utility to make requests
 
and then to make requests from your code
 
obviously you have the fetch API but you
 
also have axios which is a library that
 
you can use that I really love I I
 
prefer it over the fetch API I think
 
it's more full featured and it's easier
 
to work with but it's similar to what
 
fetch does all right so there's going to
 
be a couple slides where we talk about
 
AI because it's such a huge Topic in
 
2022 and now in 2023 we've made a lot of
 
strides in this area there's a ton of
 
new tools coming out some of which I'll
 
mention later but these two are really
 
incredible and have really helped me
 
immensely when it comes to productivity
 
and learning so first is GitHub co-pilot
 
which is a vs code extension there's
 
also extensions for other editors as
 
well co-pilot uses artificial
 
intelligence and machine learning to
 
provide code suggestions and auto
 
completion based on the context of what
 
you're typing so it uses a deep learning
 
model that has been trained on a massive
 
data set of Open Source Code and it's
 
able to suggest entire lines of code
 
based on just a few keywords so you can
 
use it as kind of an aid but you can
 
also use it to generate data among other
 
things now GitHub copilot can really
 
improve developer productivity and it
 
can reduce the amount of time spent on
 
you know just routine coding tasks it
 
can also help new developers learn and
 
code more quickly by providing suggest
 
suggestions and examples I do think
 
there is a downside to this though which
 
I'll talk about in a minute but the
 
second tool is chat GPT which is an AI
 
powered chat bot that you can not only
 
ask questions and get extremely useful
 
answers and code samples but you can
 
also converse with it and it will
 
remember the context of your
 
conversation so if you don't like the
 
answer it gives you can ask ask it to
 
clarify or change the format of your
 
question so this technology has just
 
taken the World by storm and I think
 
it's the first real display of what AI
 
is capable of and it's very useful to
 
programmers because it can help you
 
debug and solve problems give you code
 
examples explain lines of code that you
 
don't understand and much more now again
 
with all the good stuff that comes with
 
these tools I do think there are some
 
negatives as well especially for
 
beginners I think that it may start to
 
dumb people down and make them lazier
 
because they don't have they don't have
 
to do as much work and I'm not saying
 
this about everyone or even the majority
 
but I do think it will cause some people
 
to think less and become more dependent
 
on these tools I also think that
 
we have the issue of a loss in jobs in
 
the future but I'm not going to really
 
speculate on that too much that's that's
 
for a different video with that said if
 
you do use these tools just be aware of
 
what you're actually learning versus
 
what you're having the tool do for you I
 
think this is going to be a big issue in
 
the future so if you're a beginner just
 
don't let the tools do the work for you
 
have them help you and have them on help
 
you understand all right so once you
 
learn HTML CSS JavaScript and you're
 
able to use git and GitHub you want to
 
learn to push your websites to a Hosting
 
account you want to be able to host your
 
projects on the web and there's tons and
 
tons of services I'm going to mention
 
some some of the the more intricate full
 
stack hosting Services later these ones
 
are more for front-end projects and
 
they're really really easy to use so
 
first of all you're going to need a
 
domain name you can do that before or
 
after you push to a host because when
 
you use these Services they give you
 
just a temporary
 
kind of a dummy domain name just as a
 
placeholder and then you can register a
 
domain name I like to use namecheap but
 
you can use you know plenty of other
 
services and then you point it to that
 
web host so netlify is the first one
 
here which is probably my favorite for
 
front-end projects and it's very popular
 
in the JavaScript Community they offer a
 
really really generous free tier and
 
there's features like form submissions
 
and serverless functions which I'll talk
 
about in a bit and it's super easy to
 
deploy basically you just push to GitHub
 
and then you log in to netlify with
 
GitHub and you just simply select a
 
repository you select a certain Branch
 
from a repository and it will just
 
automatically deploy and then every time
 
you push to GitHub to that certain
 
Branch it will automatically Deploy on
 
netlify so you get just continuous
 
deployment which is really nice now
 
versel is very very similar the way that
 
you push your site to versel is very
 
similar they offer similar
 
features there's a generous free tier so
 
versel they are the creator of the next
 
JS framework so they're great for next
 
projects I'll talk more about next.js in
 
a little bit but that's another option
 
GitHub pages is another free option for
 
small projects it's good for like
 
personal portfolios things like that and
 
super simple to set up because all you
 
have to do is just name your repository
 
in a certain way and it will just work
 
now the last one cpanel cpanel isn't a
 
hosting provider it's a it's a platform
 
where you can publish websites you can
 
set up and check emails you can set up
 
MySQL databases and there's tons of of
 
Hosting companies that offer cpanel such
 
as HostGator hostinger in Motion Hosting
 
Bluehost a lot of them have been around
 
for years years or even decades and
 
cpanel I like it because it gives you
 
everything in one place if you want to
 
set up all your emails and stuff you can
 
do all that from cpanel where if you use
 
these other services you have to set up
 
separate email hosting you can also set
 
up my SQL databases or postgres
 
databases you can set up FTP accounts
 
although I wouldn't really recommend
 
using FTP these days and you can also
 
push from GitHub just like you can with
 
these other ones so these are kind of
 
the main easy choices that you have as a
 
front-end developer okay so let's say
 
that you've learned everything we've
 
talked about up to this point if that's
 
the case I'd say that you're a
 
foundational front-end developer now in
 
2023 you're most likely going to have to
 
learn a front-end framework and learn
 
some more modern Tooling in the front
 
end and I'm not saying it's impossible
 
to get a job at this point I've seen it
 
happen over and over and in a lot of
 
cases the company will actually train
 
you to learn learn react or whatever the
 
technologies that they use are all right
 
so it's not impossible if you're going
 
the freelance route I think that you
 
could definitely start to work on
 
getting clients just know your
 
limitations know what you can handle
 
there's a lot of small businesses out
 
there that just need pretty simple
 
websites maybe some JavaScript
 
functionality but stuff that I think
 
that you could handle at this point just
 
don't go taking on like a custom
 
e-commerce platform or something like
 
that
 
so you should have just a basic be able
 
to set up a basic development
 
environment with your text editor your
 
IDE any plugins that you use you should
 
know how to navigate your code easily
 
with shortcuts run a local Dev server
 
with something like live server use
 
Emmett for fast HTML and CSS things like
 
that you should also be able to create
 
some decent looking websites with HTML
 
and CSS this includes semantic markup
 
layouts CSS grid and of course
 
responsive design now I'm not saying you
 
have to be great with design you should
 
be able to look at a design and recreate
 
it but I do think you should understand
 
some basic design principles just very
 
very basic I know that design is is
 
subjective in a lot of ways but there
 
are some things that are just
 
objectively bad when you have things
 
squished together or you can't read the
 
text that's just bad and you should be
 
able to spot that easily all right so as
 
far as JavaScript goes you should be
 
able to work with the document object
 
model interact with it the amount of
 
JavaScript you learn depends on what you
 
want to do I mean if you ultimately want
 
to be a PHP or python developer you can
 
get by with just the basics but if
 
you're going to be a front-end developer
 
and you want to be able to create
 
Dynamic uis then you should learn
 
everything we talked about and continue
 
your journey with JavaScript going into
 
toolings Frameworks and even node.js on
 
the back end the fetch API is really
 
important and you should learn HTTP so
 
you should know status codes just the
 
main you know 200 404 or 500 Etc and
 
know how to make an HTTP request with
 
fetch know how to read the responses in
 
the in the dev tools things like that
 
you need to know how to initialize a git
 
repository commit your changes you
 
should be able to create branches clone
 
other projects make pull requests and so
 
on I think that any Dev job you get is
 
is going to be using git and if they
 
don't use git they're going to use some
 
kind of Version Control
 
so you should know how to deploy a
 
project I would suggest having a
 
preferred domain name provider and a
 
preferred Hosting account hosting
 
service that you like that you can use
 
rather than you know having 10 different
 
ones that you use
 
now it's optional but it's helpful to
 
know a CSS framework like Tailwind or
 
bootstrap and it can also be helpful to
 
to know SAS as well
 
so now that you have some foundational
 
front-end skills you need to choose your
 
next PATH so these are the main options
 
that I came up with and of course they
 
do blend into each other but I tried to
 
create a few separate categories based
 
on what you'll be doing I also put the
 
colors for which type of developer would
 
take that route
 
so the first one here if your goal is
 
more web design based meaning maybe you
 
want to try and freelance or create an
 
agency that creates websites for other
 
businesses then you may want to dig
 
further into creating really nice
 
layouts this means lots of CSS you may
 
also get into some no code tools like
 
WordPress webflow Shopify and these are
 
great tools for Freelancers so that
 
could be an option you know you're not
 
really getting into building complex
 
applications or super Dynamic uis but
 
more like brochure type websites you can
 
add some JavaScript functionality make
 
it Dynamic and so on so you that's one
 
way that you could go we also have the
 
option to jump into the back end if your
 
goal is to learn PHP python Ruby Java or
 
any other server-side language then you
 
you might want to move to this area next
 
if you're sticking with JavaScript you
 
may want to move to node.js at this
 
point especially if you plan on being a
 
back-end developer and your goal is not
 
so much creating client facing websites
 
and applications but more like apis and
 
microservices in that case there's
 
really no need to learn react or web
 
design or anything like that so if you
 
want to skip right to the server side
 
Tech you could do that now as well now
 
if your goal is to be either a front-end
 
developer or a full stack Dev that can
 
create Dynamic interfaces or you do want
 
to go the web design route but also want
 
to be able to create more intricate
 
interfaces then I would suggest learning
 
more about front-end tooling and moving
 
to front-end Frameworks that's probably
 
your best bet and that's what we're
 
going to talk about in the next slide
 
because I think that's the most common
 
Choice the most common path to take from
 
here it's also what I would recommend to
 
just about anyone that isn't doing
 
strictly back end and then the last
 
option I came up with is to keep working
 
on your JavaScript skills and just your
 
programming fundamentals in general
 
meaning that you don't move to a
 
framework yet but you maybe get into
 
algorithms and data structures learn
 
more about design patterns and so on
 
websites like code Wars are great when
 
you really want to challenge yourself
 
and you want to learn just get better at
 
problem solving learning high order
 
array methods and loops and just
 
becoming a better programmer and Problem
 
Solver in general so this option I think
 
is good if you're coding as a hobby it
 
may not be the best option if you're
 
trying to get a job or start freelancing
 
quickly because if you want to do that
 
you want to get into the Practical
 
technologies that are going to get you
 
to work okay so like I said we're going
 
to jump into front-end Frameworks and
 
tooling now when I say tooling I mean
 
tools that help us have a more advanced
 
front-end development workflow as
 
opposed to just having a single JS file
 
included in our HTML where we have all
 
of our job JavaScript crammed into that
 
one file now when you use a framework
 
like react all this stuff is done under
 
the hood and if you want to jump right
 
into a framework that's fine that seems
 
to be what most people do actually
 
however if you want to look more into
 
build tools I think it'll give you a
 
better overall picture as to what's
 
actually happening and how when and how
 
things work under the hood which I'm a
 
big fan of so to put it in simple terms
 
our projects can have a bunch of
 
JavaScript modules which are just files
 
that we Import and Export our code from
 
and we can also use third-party modules
 
using npm and then what these tools do
 
is it takes everything all of our
 
modules both custom and npm modules as
 
well as other files and assets like CSS
 
and SAS files images and so on and it
 
compiles it all into a single or maybe a
 
few bundled files that we then include
 
in our HTML in our script tag all right
 
right so you have your development
 
environment and then you compile it down
 
to assets that you have for production
 
all right so to let's take a look at
 
some of these tools now I may be a bit
 
old school but I personally still prefer
 
webpack it's a module bundler that takes
 
all your files and bundles them together
 
it's been around forever it's
 
essentially the initial module bundler
 
but it can be a bit difficult when it
 
comes to configuration when you're
 
installing different plugins and loaders
 
some of the other tools here are newer
 
and they require less configuration
 
webpack 4 and our starting in webpack
 
for they call it zero config because you
 
don't technically need configuration to
 
use it but once you want to install a
 
plug-in or a loader then it can be a
 
little bit difficult especially for
 
beginners but it is very very full
 
featured and there's a ton of support
 
and resources for it so then you have
 
parcel which is also a module one
 
bundler it's it's a bit newer it's less
 
bloated and it's more of a no config
 
solution but it's also not as full
 
featured so of course you have pros and
 
cons then we have newer tools like Veet
 
so Veet is a build tool but it isn't
 
technically a module bundler itself it
 
leverages es modules in the browser for
 
development so in turn it's it runs
 
faster and when it comes to building
 
your files for production it uses a
 
module blinds are called rollup now
 
snowpack is another newer tool which is
 
a kind of a no bundle solution it's very
 
similar to Veet it uses es modules in
 
the browser and also uses roll up for
 
building for production I think tools
 
like Veet and snowpack are the future
 
when it comes to front-end build tools
 
they're much faster they're less bloated
 
than things like parcel or webpack
 
however porcelain webpack have been
 
around longer and do have more support
 
and resources available
 
okay so now we're going to look at front
 
end Frameworks and these Frameworks use
 
build tools like we just looked at under
 
the hood so you don't really have to
 
deal with them or deal with any
 
configuration you have tools like create
 
react app that'll just scaffold up an
 
application for you so it's up to you if
 
you want to really learn what's going on
 
under the hood at this point or if you
 
want to do that later on now all
 
front-end Frameworks have the concept of
 
components so everything in your website
 
or UI is looked at as a component from
 
the navigation to the search boxes to
 
the blog postcards everything is a
 
component and you kind of have to get
 
into that frame of mind when you're
 
using a front-end framework
 
state is another thing that you'll need
 
to get comfortable with state is
 
basically just data there's component
 
level state which is relative to a
 
specific component in your UI so for
 
instance if you have like a collapsible
 
menu and it let's say it opens and
 
closes when you click something that
 
would have a piece of state to tell if
 
it's open or closed so to just most
 
likely be a Boolean value so that would
 
be an example of component level State
 
then you have Global or app level state
 
which is data that's available to all
 
components so if you're fetching data
 
from a database like let's say blog
 
posts or something you'd probably want
 
to have that data available to multiple
 
components so that would be your Global
 
State and there's different tools you
 
can use to manage your Global State both
 
within the framework and also
 
third-party tools all right now these
 
Frameworks were initially created to
 
build what are called single single page
 
applications or Spa spas and basically
 
what that means is there's just a single
 
HTML page that loads the bundled
 
JavaScript from the framework and then
 
all the routes everything all the
 
components all the state is all in the
 
JavaScript okay so essentially your
 
entire website or your entire user
 
interface comes from the JavaScript and
 
it's just loaded with a single page now
 
in addition to that in addition to Spas
 
now we can use meta Frameworks or full
 
stack Frameworks like nextjs which is
 
still react okay next.js uses react but
 
we can also write code that runs on the
 
server as well as code that is is run on
 
the client side run the browser and
 
basically all of these Frameworks have a
 
meta framework that you can use with
 
them and I'm going to get into those
 
meta Frameworks later but right now I
 
just want to talk about the the basic
 
Frameworks all right so first we have
 
react which was created in 2013 By
 
Facebook and I'd say it's the most
 
popular front-end framework it's
 
absolutely everywhere technically react
 
is it's actually a UI library but it's
 
used in the same way that Frameworks are
 
used the only reason it's not a
 
full-fledged framework is because some
 
things or a couple things are missing
 
such as a router you know there's no
 
router in the core react Library however
 
there is a package called react router
 
Dom that we can install and use so
 
things are just more broken up compared
 
to a more full-fledged framework like
 
angular now as far as learning curve I
 
would say react is in is in the middle
 
it's not the most difficult but I also
 
wouldn't call it easy I would say react
 
is my favorite framework but I do have
 
some issues with it I think that in many
 
cases there's just too many ways to do
 
the same thing so it's not really clear
 
which path to take I think that's kind
 
of my biggest beef with it it does get
 
updated quite a bit however the updates
 
don't seem to have too much of an impact
 
on code from older versions one of the
 
main reasons to choose react is because
 
of its popularity you know you have
 
access to a ton of resources and support
 
and there's a lot of react jobs
 
available but there's also a lot of
 
react developers now in addition to the
 
framework itself I just listed some
 
things that are really popular in the in
 
the react ecosystem or in these
 
Frameworks ecosystems so create react
 
app is a CLI tool that you can use to
 
quickly spin up a react application if
 
you wanted to install react in all its
 
dependencies manually using npm and then
 
use some kind of module blunder like
 
webpack you could absolutely do that but
 
create create react app does it really
 
quickly and easily and I do see it
 
losing popularity because of next JS
 
next JS is a is a whole new way to use
 
react so a lot of people are using that
 
over create react app although I think
 
for beginner there is if you're just
 
starting out I wouldn't recommend
 
jumping into next JS it's just too much
 
at once so create react app is perfect
 
for beginners to get started with the
 
framework then we have the react router
 
of course it's not included with the
 
core Library so we usually install react
 
router Dom if you want multiple Pages or
 
multiple routes and then jsx is the
 
JavaScript syntax extension that's what
 
react components output so it's
 
essentially HTML from within JavaScript
 
which makes it Dynamic so we can include
 
variables and expressions and so on then
 
we have the context API which can be
 
used for managing Global State and then
 
we also have third-party State
 
Management Systems like Redux which has
 
been very popular for a long time
 
there's the Redux toolkit which makes it
 
easier to work with and then we also
 
have xstate which I see a lot of people
 
using recently and it's a state machine
 
I haven't used it myself but I'm going
 
to be getting into it soon and then
 
there's also a concept of hooks so react
 
components can be either classes or
 
functions and for a long time classes
 
were were mostly used because you could
 
do a lot more from class components but
 
in react 16 hooks were introduced which
 
allow your functional components to hook
 
into the life cycle and you can manage
 
State and stuff like that so at these
 
days you're probably going to be using
 
functional components
 
all right so next we have vue.js and
 
view has been around I believe since
 
2014 and it is it's a component-based
 
framework so it has a lot of the the
 
same fundamentals that react has I think
 
it has a much easier learning curve than
 
react I'd say it's probably the the
 
easiest framework to learn and one thing
 
I like is that it's not it wasn't
 
created by some big conglomerate like
 
react in Facebook or angular and Google
 
it was created by a developer named Evan
 
you and it has a huge Community around
 
it and just the fact that it wasn't
 
created by a huge company and it's so
 
popular really says a lot about it and
 
how good it is I say react is my
 
favorite framework because it's the one
 
I use the most but if I were to start
 
over and choose a main framework then I
 
I can say that I probably choose view
 
but that's just my personal opinion
 
don't let that affect you know what you
 
think or how how how you choose as far
 
as the ecosystem view CLI is very
 
similar to create react app it's used to
 
spin up a boilerplate application
 
there's also view UI which you can do
 
this from the browser from a GUI rather
 
than the command line and then there's
 
the view router which is obviously used
 
for routing it deeply integrates with
 
the framework and then for third-party
 
State Management we used Vue X for a
 
long time but now it's it's called pinia
 
which is essentially identical to view
 
X5 so it's a little weird so you have
 
view X slash pinia I guess for for
 
Global State Management
 
and then there's there's a couple eight
 
different apis for the components the
 
original options API and then in view
 
three they have the the composition API
 
which I think is a little bit more
 
difficult I actually prefer the older
 
options API
 
and then view defy is a UI Library
 
that's very popular it uses Google's
 
material design guide and I'll I'm going
 
to talk more about UI libraries or
 
component libraries in a little bit
 
and then nuxjs is basically next.js and
 
but instead of react it uses View and
 
again I'll talk more about that later
 
and more about static State sorry static
 
site generators such as grid sum which
 
is comparable to Gatsby all right so
 
those are just some of the things that
 
you'll find in the view ecosystem okay
 
so next we have angular which has been
 
around a really long time I think it was
 
one of the first big front-end
 
Frameworks although it was much
 
different back then it was angularjs
 
which is essentially a different
 
framework than the angular we know today
 
so I think angular is the toughest to
 
learn unlike react it is a full-fledged
 
framework and has a ton of features and
 
a ton of things to learn which makes it
 
kind of difficult angular has its own
 
router its own HTTP client it has
 
Services which help you manage State
 
angular also uses typescript out of the
 
box so that's something else you have to
 
learn
 
along with everything else I do find
 
that beginners struggle a lot with the
 
terminology angular uses like dependency
 
injection and stuff like that don't get
 
me wrong I think angular is a really
 
powerful framework I just think that it
 
can be a lot for a beginner and it's
 
used mostly in like the Enterprise world
 
big business you know really large
 
complex applications where react and
 
view can still be used in in those
 
environments but they're also used a lot
 
in startups as well as personal projects
 
and then as far as the ecosystem we have
 
angular CLI which is similar to again
 
create react app and view CLI typescript
 
as I mentioned angular uses by default
 
so I'll talk more about typescript soon
 
ngrx is used to manage State it's a
 
third-party State management system that
 
was actually inspired by Redux and ngrx
 
uses some thing called observables which
 
are very common in angular and
 
observables are used to work with
 
asynchronous data or data streams and
 
it's another aspect of angular that I
 
think makes it a little bit tougher to
learn
learn
 
learn
 
and then for server-side rendering we
 
have angular Universal which can be
 
comparable to next next JS and nuxjs so
 
if you want to render pages on the
 
server you can use that
 
and then you also have of course the dev
 
tools for the browser as well as vs code
 
extensions or whatever editor you use
 
okay so the next framework we're going
 
to look at is svelte which is a newer
 
front-end framework that's gained a lot
 
of popularity in the last couple years
 
and one of the main selling points is
 
its small size and fast performance and
 
with svelte it works a little bit
 
different so instead of creating a
 
virtual Dom or a virtual representation
 
of the user interface like something
 
like react does it instead compiles the
 
code into highly efficient and optimized
 
vanilla JavaScript so technically it's a
 
compiler and not a framework but it's
 
used in the same way as a framework and
 
it's a direct competitor to the others
 
and I think it has one of the easiest
 
learning curves because it almost feels
 
like just vanilla JavaScript and it's
 
also easy to integrate into other
 
JavaScript libraries now when it comes
 
to the ecosystem there aren't many
 
things that aren't included if you use
 
something called svelt kit so svelt kit
 
includes routing State Management
 
data fetching it even it even has a
 
server-side rendering so I'm a big fan
 
of svelt because it feels like what an
 
experience of a user interface is
 
supposed to feel like and there's not
 
all these different terms and
 
limitations like you have with a lot of
 
other Frameworks you define a global
 
variable like you normally would and
 
there's no hooks or anything needed it's
 
just very simple and that's what I love
 
about it unfortunately there's not a ton
 
of jobs hiring for svelte so that's kind
 
of the downside to it but if you're
 
building like a personal project or
 
something I think sveld is a great
 
option it's spelled with svelt kit and
 
then you also have Dev tools for the
 
browser and for your your text editors
 
and so on now we also have a new
 
Contender this year called solidjs and
 
it's technically called a reactive
 
Library it's very similar to react as it
 
uses components that return jss X
 
however solid doesn't use a virtual Dom
 
like react does it uses a compiler more
 
like svelt so another big selling point
 
for solid is is how lightweight it is I
 
believe the entire framework weighs
 
about 6.5 kilobytes and has extremely
 
fast run Time Performance so solid.js is
 
reactive meaning that it automatically
 
updates the user interface in real time
 
as the state of the application changes
 
and this makes it easy to build complex
 
and interactive user interfaces without
 
the need for a manual Dom manipulation
 
or complex data binding so as far as the
 
ecosystem goes if you go to the website
 
there's an ecosystem link which will
 
give you a categorized list of all the
 
packages that you can use with solid so
 
there's testing packages and build tools
 
whole UI is a UI library for a solid
 
that looks pretty promising there is an
 
SSR frame more called solid start which
 
looks really cool it actually looks a
 
lot like svelt kit but for a solid.js
 
but as far as I can tell it's still in
 
beta so definitely something to to keep
 
your eye on
 
all right so those are the main
 
front-end Frameworks that you have to
 
choose from I know that that's a lot of
 
information to take in but what I would
 
suggest is just messing around with a
 
couple of them and just seeing what
 
feels what feels the best to you what
 
feels the most natural and then go off
 
that you know you don't have to learn
 
three different Frameworks in and out
 
just try each one that's one of the
 
reasons why I like to create a crash
 
course every year every two years on all
 
the Frameworks using or creating the
 
same application so you can see the
 
differences
 
all right so next we have typescript
 
which is a superset of JavaScript
 
meaning that it is essentially
 
JavaScript with some added features and
 
the main feature of typescript hence the
 
name is static typing so JavaScript the
 
JavaScript language is dynamically typed
 
meaning that when we create a variable
 
or we add a function parameter we don't
 
specify which type of data that variable
 
should contain so it's Dynamic it
 
happens automatically with many
 
languages like Java C sharp C plus plus
 
rust and many others you actually have
 
to Define your types for your variables
 
now there are pros and cons to Dynamic
 
versus static typing a dynamic language
 
is good in terms of allowing you to
 
write less code which makes you your
 
right time faster however there are
 
advantages to having to declare your
 
types for example static typing can help
 
catch errors early in the development
 
process which can then save time and
 
improve the overall quality of the code
 
static typing can also make the code
 
more self-documenting and easier to read
 
and there are other features that
 
typescript offers as well especially
 
when it comes to object oriented
 
programming you have classes interfaces
 
inheritance a lot of this stuff is
 
already included within JavaScript after
 
the es2015 update so the main reason you
 
would use typescript is for static
 
typing and if you ask me I would say
 
learn JavaScript until you feel really
 
comfortable with it and then you can
 
literally pick up typescript in like a
 
weekend at least the basics it can get
 
tricky when you start using it with
 
front-end Frameworks or even on the back
 
end with node.js but it is a very
 
valuable skill to learn and it is big in
 
the job market as well
 
okay so we discussed CSS Frameworks
 
earlier and how they help you create
 
interfaces faster or websites faster as
 
you have pre predefined classes to work
 
with now you can use CSS Frameworks out
 
of the box with a front-end framework
 
like react however there are also what
 
are called UI kits or component
 
libraries and these take it a step
 
further and give you actual styled
 
components so they have their own State
 
and their own properties and their you
 
know they have the design the CSS so for
 
instance if you wanted a bootstrap alert
 
instead of including a class you would
 
actually import the alert component into
 
your code and then you could use that
 
and that has its own props in its own
 
State and so on all right so for react
 
you have a library called style
 
components which is very popular and it
 
allows you to do just that you create
 
components that are strictly for styling
 
things like cards and alert and so on
 
now the thing with style components is
 
it's up to you to actually style
 
everything it gives you the
 
functionality to be able to
 
have create card components but you
 
actually add the CSS for that stuff all
 
right in addition to to that you have
 
other UI libraries that have the
 
predefined Styles so for instance
 
material UI is a popular UI kit for
 
react and it's based on Google's
 
material design so all the components
 
have a certain look as far as the the
 
buttons sliders inputs and all that
 
stuff chakra UI is another one for react
 
that's pretty simple and modular and it
 
doesn't use any specific framework like
 
bootstrap or anything like that it's
 
kind of its own thing but I really like
 
chakra UI and then for bootstrap you
 
have you have a few different libraries
 
I like react bootstrap basically if you
 
want to use let's say a bootstrap nav
 
bar you just import that and you can use
 
that you can add whatever props and
 
state are available with that component
 
so for view you have beautiful I which I
 
already mentioned that's I would say the
 
most popular it is based on Google's
 
material design like material UI if you
 
want to use a bootstrap component
 
Library bootstrap view is a good option
 
for that and then there's also Quasar
 
which is another popular kit built on
 
material design so lots of these are
 
built on Google's material design style
 
guide
 
for angular you have angular material
 
and then if you want to use bootstrap
 
you have NG bootstrap there's some other
 
ones as well for svelte there is svelte
 
material UI which is similar to reacts
 
material UI and then you also have
 
svelte strap for solid.js I had
 
mentioned there's uh there's a tool
 
called hope UI which looks really cool
 
I've never used it but from the look of
 
the components it has a really modern
 
look to it but there's there's so many
 
of these in fact the design resources
 
for developers GitHub repo has a ton of
 
these if you want to check that out
 
okay so learning testing is not
 
something that every developer does
 
early on and who am I kidding this is
 
not something that every developer does
 
ever I think that learning how to write
 
unit tests can can be very beneficial
 
and if you're working for a company it
 
may be something that you absolutely
 
need to do if your goal is freelancing
 
my opinion is I think you should just
 
skip testing because you're usually not
 
creating these giant you know Enterprise
 
level applications and that's where I
 
think tests really matter so just to
 
look at some of the examples of the
 
different types of testing unit testing
 
is I would say the most common in web
 
development so basically you test for
 
specific units of code for example a
 
function and the goal is to ensure that
 
each piece of code is doing what it's
 
supposed to do all right you also have
 
integration testing which is a type of
 
testing that focuses on how different
 
pieces of code work together and then
 
end-to-end testing is to test the entire
 
application from the user's perspective
 
you also have like performance testing
 
where it tests your application under
 
CPU load this isn't really common in web
 
development though a lot of Frameworks
 
and languages have testing capabilities
 
included but on the right here are just
 
some popular libraries and Frameworks
 
for each language so in JavaScript I
 
usually use jest but you have mocha
 
Cypress
 
Jasmine you have more specific tools
 
like react testing library for react and
 
then all these other languages also have
 
testing tools as well I'm not going to
 
go through every single one okay so as a
 
front-end developer you should be
 
familiar with the common web apis or
 
browser apis and I mentioned earlier you
 
should try to get familiar with the
 
browser environment and that includes
 
these apis and there's more than this
 
these are just some of the common ones
 
so canvas this is useful for things like
 
animation Dynamic graphics and
 
visualization it's really common for
 
HTML5 games if you want to be able to do
 
some really cool stuff visually then you
 
want to definitely learn the canvas API
 
so geolocation will allow you to ask for
 
a user's location we've all had that
 
pop-up asking for permission this can be
 
very useful for any kind of project that
 
requires the user location so you can
 
get the latitude and longitude if you
 
need to place it on some kind of map or
 
get the local weather whatever it may be
 
so the speech API is one that's really
 
blowing up right now due to the AI chat
 
bot stuff going on so this API has
 
speech recognition so that we can speak
 
into a mic and then get this the
 
transcript as well as speech synthesis
 
to make them the machine talk back with
 
text-to-speech so this is definitely
 
something to get into and honestly it's
 
really easy to learn and easy to use is
 
so the audio and video apis are used
 
obviously to deal with media whether
 
you're creating a custom video player or
 
music player or adding effects or
 
anything like that and then webrtc is
 
something I'm seeing a lot of lately as
 
well it allows you to have real-time
 
communication over video and or audio so
 
you can create voice and video chat
 
applications Dennis Ivey actually has a
 
video on this channel showing you how to
 
do just that
 
local storage also extremely important
 
this allows you to store data on the
 
client or in the browser of course you
 
don't want to put sensitive info in
 
there it's good for things like storing
 
the user's name for a greeting or
 
something like that and like I said
 
there's a lot of other apis as well but
 
again just be familiar with the the
 
entire browser environment
 
all right so the next category of
 
Technologies are they have there's a few
 
different names that these go by full
 
stack meta framework SSR framework so
 
these are designed to provide a complete
 
solution for building web applications
 
from front end to back end and in my
 
opinion Frameworks like these are really
 
the future because before we had either
 
just client-side Frameworks like react
 
or just server-side Frameworks like
 
Express or laravel now we have the best
 
of both worlds and of course these do
 
have the limitations it's not like
 
back-end apis and microservices are
 
going anywhere anytime soon but there
 
are a lot of benefits when using
 
something like next.js so it's better
 
for SEO because search engines can see
 
the content rather than just the
 
placeholder for the JavaScript bundle it
 
has performance gains because we don't
 
have to wait for the JavaScript to
 
render everything it also provides
 
Simplicity for things like routes where
 
you can simply put a file named about JS
 
into a certain folder and then you have
 
your routes you don't have to have any
 
kind of router or anything like that so
 
let's take a look at some examples the
 
most common I would say is next JS and
 
if you're a react developer this is
 
probably what you're going to look to I
 
know it may sound confusing like like an
 
Inception of a framework within a
 
framework but just think of these as
 
server rendering environments to run
 
react or view or whatever inside of and
 
you get a bunch of of cool extra
 
features so you get data fetching
 
methods file based routing image
 
optimization you can also create API
 
routes right within the folder structure
 
so in some cases you can use next in
 
place of or next API routes in place of
 
an Express server for certain tasks all
 
right now next version 13 was released
 
and introduced a new folder structure
 
that allows for more modular and a more
 
organized approach to structuring your
 
application next 13 also takes advantage
 
of react's new server components feature
 
now if you're a react developer next
 
isn't the only option you have remix is
 
another one that's really catching on
 
and remix have some have some really
 
cool features such as the form component
 
which behaves like the browser's native
 
form element like a regular HTML form
 
element with an action it also handles
 
transitions in loading States rather
 
elegantly and remix automatically
 
handles errors interruptions and race
 
conditions so you'd have to do some
 
research to choose between xjs and remix
 
the one thing I can say for sure is that
 
next is more popular at this time but
 
you know it's also been around longer
 
now nuxjs is extremely similar to nexjs
 
in terms of server-side rendering and
 
what it does it just uses vue.js instead
 
of react.js so if you choose view as
 
your main front-end framework you're
 
probably going to go with nox for
 
server-side rendering and nux supports
 
hybrid rendering that lets you use route
 
rules which determine how the server
 
should respond to a new request to a
 
specific URL it also has image
 
optimization file based routing and you
 
know all that good stuff now for angular
 
we have angular Universal which I
 
mentioned briefly earlier and it
 
integrates well with the angular CLI it
 
has Rich debugging tools and has
 
built-in support for lazy loading I
 
haven't personally used angular
 
Universal well I shouldn't say that I've
 
experimented with it about a year ago
 
but I haven't really built any projects
 
with it all right first of all we have
 
spell kit which will render pages and
 
components first on the server and then
 
send it to the client as HTML it'll then
 
render the component or the page again
 
in the browser to make it interactive
 
this is called hydrating the page and
 
you can control what you want rendered
 
on the server as well as the client you
 
may want the user facing site server
 
rendered but then have the admin area as
 
a single page application it seems like
 
spell kit is the go-to when using svelte
 
at this point so next we have Blazer
 
which this may not be the perfect
 
category for it but I think it fits in
 
here well because it is a full stack
 
framework however it's not JavaScript
 
surprisingly Blazer is a Microsoft UI
 
framework that leverages c-sharp and
 
webassembly to create single page
 
applications that run in the browser and
 
of course it has server side
 
functionality as well so we haven't
 
talked about webassembly I will talk
 
more about it later but as a brief
 
explanation in it's a low-level binary
 
format for executing code in the browser
 
and that's how we're able to use c-sharp
 
to write client-side applications as
 
well of course as well as server-side
 
code so JavaScript is the language of
 
the front end but I think in coming
 
years with webassembly that may start to
 
change so if you want to get into C
 
sharp which I'll talk about when we get
 
into server side Blazer is definitely
 
something that you may want to get into
 
some other features include hot
 
reloading lazy loading and
 
virtualization okay so the next two are
 
actually triple Inception so we have a
 
framework within a framework within a
 
framework because both Redwood and Blitz
 
are built on top of next JS so that may
 
be a turn off at first glance but these
 
things offer a lot of different
 
Technologies all packaged up nicely for
 
the for you to use where usually you
 
would use this stuff anyway it would
 
just be you know it wouldn't it would be
 
be decoupled so I actually like what
 
redwood and Blitz are doing so like I
 
said they're both built on xjs Redwood
 
includes Prisma which is an orm that
 
supports all the popular databases it
 
includes typescript graphql storybook
 
which helps you document and organize
 
your components Redwood is branded as a
 
solution for startups which makes sense
 
because it includes all these powerful
 
Technologies in one place so Blitz
 
Brands itself as an xjs toolkit and
 
picks up where next leaves off so it
 
features a type safe API layer it has
 
authentication and middleware so there's
 
scaffolding tools it's a nice all-in-one
 
solution and I actually haven't built
 
anything with either of these yet but
 
I'm actually excited to get into them
 
this year and not only use them but
 
create some content and and teach what I
 
learned
 
all right so the next batch of
 
Technologies we'll look at are static
 
site generators and these are tools that
 
we use to create very performant and
 
very optimized websites and they aren't
 
really used for large complex
 
applications at least in my experience
 
that's not
 
um that's not to say that you can't have
 
Dynamic data you can use apis you can
 
use headless content Management Systems
 
which we'll talk about next and
 
different data sources what happens is
 
all the data fetching happens before
 
build time so this makes your site
 
really fast because it doesn't have to
 
go out and fetch data while the user is
 
using it you know waiting for the data
 
to be fetched it's already pre-fetched
 
so one thing I want to say is that I
 
think these are great for Freelancers a
 
lot of the projects we get as
 
Freelancers are things like small
 
business websites and this gives you a
 
real modern solution to quickly create
 
very performant websites that are search
 
engine friendly which of course is very
 
important to small businesses and
 
important in freelancing all right so
 
I'm going to start off with my favorite
 
one which is Astro so it's one of those
 
things where
 
it just works how you would expect and
 
how you would want so you can build your
 
site using JavaScript components whether
 
it's Astro components which are
 
extremely simple or you can use react
 
view spelled so you can use these other
 
Frameworks as well to build these fast
 
performance static sites now once you
 
build your site and you have your
 
components it actually gets compiled
 
into static HTML at build time so it
 
strips out all the client-side
 
JavaScript that you use to create your
 
components and so on so it it utilizes
 
what they call the island architecture
 
so you can fetch data from anywhere and
 
one of the things I love about Astro is
 
the top level async which means that you
 
can use a sink away or technically just
 
a weight because there's a top level of
 
sync which means you don't have to put
 
that away inside of a function label to
 
sync now Gatsby is a static site
 
generally the generator that uses the
 
react framework you can create pages
 
that are simply react components so you
 
can still structure everything as you
 
would in a regular react app but with
 
extra capabilities so one unique thing
 
about Gatsby is that it uses a graphql
 
data layer that you can use to query
 
data and I know I haven't gone over
 
graphql yet but I will in a little bit
 
it's essentially a query language to
 
query and mutate data so if you have a
 
blog or something like that you can
 
store the posts whether it's in markdown
 
files or an API or a headless CMS Gatsby
 
has all kinds of features that can help
 
you fetch that data and there's features
 
like image optimization code splitting
 
and more
 
now I know we talked about next JS when
 
in terms of static site render I'm sorry
 
server side rendering but it also has
 
static site generation capabilities as
 
well so there's an export command that
 
you can use to export your your project
 
as a static site although there are some
 
limitations and there are some some
 
guidelines and conventions that you have
 
to follow in order for it to
 
successfully build as a static site and
 
next we have gridsum which is very
 
similar to Gatsby except it's vue.js
 
instead of react.js so you can see that
 
a lot of these Frameworks copy each
 
other which isn't really a bad thing
 
because it gives you more options and if
 
you want to switch to something else you
 
already have an idea of how it works so
 
gridsim is a big part of the view
 
ecosystem it has some great features for
 
Progressive web apps as well which I'll
 
talk about in a little bit
 
so there are other static site
 
generators that aren't built or based on
 
JavaScript Jekyll is one of those
 
options so Jekyll is actually Ruby based
 
and uses the liquid template engine so
 
although you don't have to be a ruby
 
developer to use it it's actually the
 
default generator for GitHub pages so
 
here's some other ones that I'll just go
 
over really quickly so Hugo is a
 
generator that's based on the go
 
programming language it was designed to
 
be fast and flexible it allows you to
 
create websites quickly and easily using
 
a variety of tools
 
hexo is branded a Blog generator so it's
 
fast and lightweight it's a static site
 
generator that's based on node.js and
 
then Pelican is a python based static
 
site generator that's designed to be
 
simple and easy to use so it's a good
 
choice for small to medium sized
 
websites so there's there's so many
 
options when it comes to this stuff you
 
just have to kind of pick a couple just
 
read about them try them out and see
 
what works for you
 
okay so I think this is a good time to
 
mention headless content Management
 
Systems because they often go well with
 
static site generators so when you
 
create a website especially a Content
 
heavy website you don't want to have to
 
go in and edit your HTML files or your
 
react components or whatever whatever
 
you're using you could use something
 
like markdown but if you're building
 
websites for clients you don't want to
 
have them to have to go in and you know
 
go into this their site structure and
 
edit markdown files and you may not have
 
the knowledge or time to create a custom
 
backend to add blog posts or products or
 
whatever it is that the application is
 
using for resources that's why WordPress
 
got so popular especially in the
 
freelance world because your clients
 
want to be able to edit their own
 
content well with the Headless content
 
management system it gives you that
 
admin area to manage your content except
 
unlike traditional
 
the CMS is like WordPress there's no
 
user facing uh website instead it
 
generates Json data that you can then
 
use with any front end whether that be a
 
single single page application with
 
react an xjs website a static site using
 
Astro or Gatsby you can literally use
 
anything you want it could even be for a
 
mobile app or something so first we have
 
strappy which is built on node.js and is
 
completely open source you can host it
 
yourself because some of some content
 
Management systems are hosted elsewhere
 
in the cloud on a different domain and
 
you basically just log in there and then
 
it gives you an API to use for your
 
front end but strappy can be hosted
 
anywhere and you can consume the content
 
API with either rest or graphql you can
 
upload photos and videos and your API
 
will include a URL so that you can embed
 
them in your front end it has Google
 
analytics integrate integration I'd say
 
strappy and next JS is one of my
 
favorite Stacks to work with
 
so sanity.io is a fully customizable
 
headless CMS that allows you to Define
 
your own content models and schemas it
 
offers real-time collaboration features
 
a rich text editor has a very flexible
 
querying API and there is a front-end
 
option called sanity studio so if you
 
wanted to to use that for your front end
 
you could there's also sdks libraries
 
and tools that let you query your
 
content and integrate it with websites
 
services and other applications so
 
Keystone is something that I've actually
 
used for a long time I remember doing a
 
keystone JS tutorial years and years ago
 
and it was completely different but it's
 
really evolved into a powerful content
 
management system and it's modernized
 
itself with graphql the UI for admins is
 
really nice and easy to work with you
 
can create primitive and advanced fields
 
create custom schemas relationships and
 
much more more
 
so content contentful is a cloud-based
 
headless CMS that allows you to create
 
manage and distribute content to any
 
platform it offers a flexible content
 
model it has a robust API a wide range
 
of Integrations it does have paid plans
 
but it does also offer a free plan that
 
can be sufficient for personal projects
 
and there are literally just tons of
 
these headless content Management
 
Systems this is just a small chunk of
 
them you have even netlify has its own
 
CMS and you can also use WordPress as a
 
headless CMS you don't have to use the
 
front-facing website
 
so the last few technologies that we've
 
looked at they fall into something
 
called the jam stack which is a popular
 
architectural approach to building
 
websites that involve JavaScript apis
 
and markup hence the acronym Jam
 
originally they put more emphasis on the
 
Jam part however the term has evolved
 
over time to really Encompass a broader
 
range of Technologies and practices so
 
in short I'd say the jam stack
 
emphasizes the use of static site
 
generators serverless functions and
 
other tools that really enable fast
 
secure and scalable web development and
 
by following these principles of the jam
 
stack developers can create websites
 
that are easier to maintain they perform
 
better and they provide a better user
 
experience okay so I wanted to put these
 
two technologies in here but I wasn't
 
sure exactly where to put them so
 
alpine.js is technically a front-end
 
framework but it works in a much
 
different way with the Frameworks that
 
I've mentioned you build your app around
 
the framework standards and you do
 
things in a certain way right with
 
alpine it's more like jQuery in fact I I
 
believe it even labels itself modern
 
jQuery and you basically just bring it
 
into your existing project and you use
 
custom HTML attributes to do things like
 
data binding listening for events hiding
 
and showing elements so there's about 15
 
different attributes they all start with
 
x dash so for instance the x dash if
 
attribute allows you to conditionally
 
add or remove blocks of of HTML so it's
 
kind of like if HTML was actually a
 
programming language and had logic this
 
is what it would look like and I think
 
it's really cool Alpine is often used
 
with Frameworks like laravel so
 
oftentimes if you don't want to use
 
something like react in your front end
 
you'll use like blade templating but
 
then to add Dynamic um components to it
 
Dynamic functionality you use something
 
like alpine.js so I think that's a
 
really good solution
 
now the next one is lit lit is a library
 
that allows you to create your own
 
custom components it's actually build on
 
it's built on the web component standard
 
and it provides reactive State scope
 
Styles and a declarative template system
 
that's really really tiny fast and
 
expressive and lit components can be
 
used across multiple apps and sites even
 
if those apps and sites are built on a
 
variety of front-end Stacks so you could
 
use lit alongside other web Technologies
 
as well
 
all right so these are tools that allow
 
you to create Advanced animation
 
visualization transitions I think that
 
if you can create appealing visuals in
 
your projects it can really set you
 
apart as a front end in UI developer and
 
this stuff is definitely not needed it
 
is optional but they're nice to add to
 
your skill set
 
so first we have motion UI which is
 
created by a company called zerb they
 
also created the foundation CSS
 
framework so motion is a SAS library for
 
creating Transitions and animations and
 
you can add Dynamic motion to various
 
elements on your website including
 
things like buttons navigation menus Etc
 
and the library includes a a wide range
 
of pre-built animations and effects as
 
well as tools for creating your own
 
frame or motion is a popular open source
 
library for creating animations in react
 
and it provides a range of features for
 
building fluid and dynamic user
 
experiences and it includes easy to use
 
animation controls gesture recognition
 
and support for 3D animations
 
3js is probably the most popular
 
animation Library it has about 90k stars
 
on GitHub it's extremely powerful it
 
uses webgl which is a JavaScript API for
 
rendering 2D and 3D Graphics so if
 
you're looking to get into powerful
 
graphics and 3D animations 3js is
 
definitely something to check out and
 
then lastly we have gsap which is the
 
green sock animation platform it's a
 
robot robust tool set for creating very
 
high performance timeline based
 
animations and it uses tweens to give
 
you more control over your animations
 
and even though it's a JavaScript
 
library you actually don't have to know
 
a ton of JavaScript to start using it
 
all right so before we jump into the
 
back end section I just want to quickly
 
mention no code tools so like WordPress
 
webflow Wix I think that these are
 
really useful for Freelancers and small
 
agencies that create websites and small
 
applications for other businesses and
 
individuals and you might see some
 
programmers particularly The Young Ones
 
trash these kinds of platforms and some
 
of them are scared that they're going to
 
take their jobs but honestly I in my
 
experience most business owners that
 
aren't developers don't even want to
 
deal with this stuff they don't even
 
want to deal with these no code tools
 
they'd rather pay someone to to build
 
their website for them and in my
 
experience these tools are used by
 
developers or designers or Freelancers
 
whatever you want to call them so these
 
are very popular platforms I mean
 
WordPress still takes up a good chunk of
 
the websites on the web and and you have
 
like web flow Wix Shopify is great for
 
e-commerce if you're if you're to build
 
an e-commerce shop from scratch that's a
 
lot of work you know that's a lot of
 
time money and work and then tools like
 
kajabi which I actually use for my video
 
platform are great you know and and for
 
me to build that from scratch I'd have
 
to stop everything that I'm doing right
 
now and work on that for the next year
 
or so and these are great to kind of
 
save you that time
 
Okay so we've talked about quite a few
 
things if you know even a fraction of
 
what we talked about then your front end
 
Superstar so you can call yourself a
 
front-end engineer or whatever it is you
 
you want to be labeled as I kind of
 
think labels are stupid but as a
 
front-end engineer you should be able to
 
work well with a front-end framework
 
which one you choose is is completely up
 
to you but you should be able to create
 
many types of projects using that
 
framework and understand fundamental
 
concepts like components and state and
 
so on you should be very comfortable
 
with consuming data apis including
 
fetching data as well as sending data to
 
the server and you should understand the
 
important HTTP status codes and
 
understand how a restful API works now a
 
moving full stack or SSR Frameworks like
 
next JS to the need to know pile this
 
year they're just getting too big and
 
becoming the standard when using
 
front-end Frameworks so I know a lot of
 
developers they don't even use create
 
react app anymore they just jump right
 
into next.js and honestly the only
 
reason that I use something like create
 
react app is because I'm teaching and I
 
think it's it's good for beginners and
 
it's also good for really small projects
as well
as well
 
as well
 
so some bonus skills that I'd say are
 
are pretty much optional but very
 
beneficial and worth learning are
 
typescript so typescript is huge in
 
front-end development so knowing how to
 
use it and work with types is definitely
 
a plus I think learning Jam stack
 
Technologies like static site generators
 
and headless content Management systems
 
are also a great idea I wouldn't say you
 
need them to get a job but they're very
 
productive especially for those of you
 
that are freelancing and need to get
 
projects out quickly and then we have
 
testing and testing it really depends on
 
what you're trying to accomplish if you
 
want to write code at an Enterprise
 
level company then testing is probably
 
in your future I wouldn't say it's a
 
necessity though if you're a beginner
 
then I wouldn't even worry about testing
 
right now at least in my own opinion and
 
experience alright so now we get to talk
 
about other things besides JavaScript so
 
the reason that we've talked about so
 
many JavaScript Technologies up to this
 
point is because we've just been talking
 
about about the front end for the most
 
part I mean we have talked about like
 
testing and stuff like that but for the
 
most part these it's all been front end
 
client-side Technologies so when we move
 
to the back end to the server you can
 
use pretty much any language you want so
 
we'll start off with JavaScript though
 
node.js is a JavaScript runtime that was
 
released in 2009 so in addition to
 
running JavaScript in the browser you
 
can run it on your machine or on the
 
server and it's extremely popular in
 
full stack development because a lot of
 
people like to use the same language on
 
both the front end and the back end
 
that's something that I really enjoy and
 
it's also very fast it's scalable it's
 
great for apis and microservices there
 
are some things that you wouldn't want
 
to use node.js for and that's typically
 
heavy computational tasks video
 
rendering machine learning stuff like
 
that these types of tasks are better
 
suited for for languages that are
 
optimized for performance like C plus
 
plus or even python so it's good to know
 
what you want to do before you choose a
 
language and I'll just mention that in
 
addition to node.js there's a another
 
JavaScript runtime called Dino that was
 
released I don't know about three years
 
ago and supposedly it was going to just
 
ruin node.js but I haven't really heard
 
much about it I do think there's some
 
really cool features I don't want to
 
trash Dino I just think it's funny how
 
everybody reacted when it was released
 
so next we have python which is an
 
amazing language overall I don't think
 
there's another language that has as
 
many uses or at least I should say high
 
level languages that have as many uses
 
from automation to web development to
 
machine learning data science it's very
 
diverse another reason for Python's
 
popularity is its ease of use and
 
readability so python code is generally
 
easy to understand easy to maintain
 
making it a a great choice for both
 
beginners and experienced developers and
 
in addition python has a vast library of
 
pre-built modules and tools which make
 
it easy to get started with a wide range
 
of projects so as far as web development
 
goes it has two really really great
 
Frameworks which I'll talk about in a
 
few minutes next we have PHP which is
 
great for what it does which is
 
practical web development PHP seems to
 
get a lot of flack although it has
 
gotten better over the the years
 
especially with laravel which is easily
 
in my top five Frameworks so PHP is not
 
the most popular with large companies
 
and Enterprise but it's still extremely
 
popular with small businesses web
 
agencies freelancing the reason for that
 
is because it allows you to create
 
things really fast whether it's laravel
 
WordPress or even vanilla PHP for
 
smaller projects you can write
 
procedural or object-oriented
 
class-based programming PHP was actually
 
my first language and I still love it I
 
don't write it much anymore but I do
 
plan on getting back into it I plan on
 
creating a laravel course within the
 
next year or so so I mean I I really
 
like PHP so next we have c-sharp which
 
is a great general purpose language like
 
python it can be used for many things in
 
my own experience with c-sharp isn't
 
really with web development it's with
 
Windows based utilities so c-sharp is
 
often used with a.net framework which is
 
extremely powerful and provides a wide
 
range of features for building robust
 
and scalable applications
 
asp.net is used for our asp.net MVC is
 
used for web applications of all sizes
 
there is a market for c-sharp Developers
 
for sure and there's a lot of jobs out
 
there so it can be a great language to
 
get into
 
so next we have golang which is a very
 
powerful language created by Google it's
 
pretty popular in the Enterprise world
 
because of its performance and its
 
scalability it can be used for web
 
applications apis microservices the
 
syntax is pretty easy to read and write
 
one of the really cool things about
 
golang is that it's really con it has a
 
really comprehensive standard Library
 
which reduces the need for third-party
 
packages and Frameworks so you can
 
create a rest API pretty easily without
 
using any other third-party Frameworks
 
much easier than if you were to use like
 
node.js without Express or anything else
 
there are Frameworks available though
 
which I'll get to soon
 
so Ruby is a dynamic object-oriented
 
language it has a very concise syntax in
 
my opinion it's similar to python but
 
even more readable it's almost like
 
reading and writing English and that was
 
actually one of the goals for the
 
creator of Ruby a lot of people will say
 
that Ruby is dead I hate when people say
 
stuff like that because
 
if it's not cutting edge then it's just
 
dead right if it's not everywhere then
 
everyone says it's dead sure there's
 
more Python and node.js jobs out there
 
but there's also more Python and node.js
 
developers so you can still find some
 
pretty good positions for Ruby
 
programming especially Ruby on Rails
 
which is its main web framework and
 
again I'll talk more about back-end
 
Frameworks next
 
so Java is a it was actually the first
 
language I've I was ever exposed to it's
 
an object-oriented language so learning
 
the principles of oop uh including
 
abstraction encapsulation polymorphism
 
really important when dealing with Java
 
it's a very diverse general purpose
 
language and you can use it for desktop
 
applications Android apps web
 
development it's very popular in the the
 
big business Enterprise world and I
 
don't really see too many startups or
 
personal projects you using Java but
 
again that's just my own experience next
 
we have kotlin which is very similar to
 
Java in fact you can use it for a lot of
 
the same projects as it is interoperable
 
with Java so it seems to be the
 
preference for Android apps at the
 
moment one of the key benefits of kotlin
 
is its concise syntax which makes it
 
easier to read and write than Java and
 
it is gaining popularity in the web
 
development or world as well I wouldn't
 
really suggest it unless you plan on
 
getting into Mobile but that's just my
 
opinion so rust has been blowing up for
 
the past couple years it's known for its
 
safety its performance concurrency it's
 
actually a systems language and is much
 
lower level than the other ones that
 
I've talked about so far meaning it's
 
closer to the computer's Hardware like C
 
and C plus plus although it's much
 
easier to read and write than those two
 
languages so there's more abstraction
 
than like C C plus plus it has an
 
ecosystem of libraries and Frameworks I
 
think it's a good choice for high
 
performance web applications and it's
 
also used with webassembly which I think
 
will be extremely popular in the future
 
so and I'll talk more about webassembly
 
later on
 
so Scala is another option for back-end
 
development it combines functional and
 
object-oriented programming paradigms it
 
Powers the data engineering
 
infrastructure of many companies and can
 
also be used for creating apis and
 
microservices
 
so r or arlang is uh not a language that
 
I've ever used and it seems to be mostly
 
for things like statistical Computing
 
and data analytics but it can be used
 
for web development it does have a few
 
web Frameworks then Swift is a popular
 
general purpose language mostly known
 
for iOS development so if you want to
 
get into Mobile app Swift is definitely
 
going to be one of your main choices
 
this doesn't there doesn't seem to be a
 
lot of options when it comes to web
 
development so from what I've learned I
 
wouldn't suggest it unless you're
 
getting into Mobile okay so now I want
 
to get into some of the Frameworks that
 
these languages offer so back-end web
 
Frameworks are typically used to create
 
apis in microservices or to create full
 
applications utilizing template
 
languages and things like that all right
 
so they usually have tools for creating
 
routes or endpoints interacting with
 
databases validate getting
 
authentication and so on some Frameworks
 
are more opinionated than others I think
 
that's that's important to understand
 
what I mean by that is some have a very
 
specific way of doing things and how you
 
set your folder and file structure up
 
things like that the conventions you use
 
in your code are really strict those are
 
opinionated and usually high level
 
Frameworks with a lot of abstraction
 
then you have an opinion
 
unopinionated Frameworks which are
 
usually more minimalistic and they don't
 
give you much out of the box however you
 
have the freedom to structure things and
 
do things however you want and they're
 
typically easier to integrate other
 
third-party tools into
 
all right now another thing that I
 
should mention is MVC which stands for
 
model view controller it's a common
 
design pattern that these Frameworks use
 
it basically separates the application's
 
concerns into three components the model
 
which represents the applications data
 
and business Logic the view which
 
represents the user interface and the
 
controller which manages the
 
communication between the model and the
 
view now not all these Frameworks use
 
MVC in the same way but a lot of them
 
they Implement some form of it
 
so we'll start with node.js so Express
 
is definitely the the most popular
 
framework for node.js it's literally
 
everywhere in the node world and there's
 
a lot of Frameworks that are actually
 
built on top of Express so Express is
 
very unopinionated meaning you can do
 
things the way that you want there isn't
 
much convention to follow Express makes
 
it easy to integrate other packages so
 
if you want to use like mongodb as your
 
database with the Mongoose Library you
 
can do that easily if you want to use
 
postgres with sqlize that's easy as well
 
so there's no assumptions as to what to
 
use in your stack Express makes it easy
 
to create routes respond to http
 
requests create middleware and so on and
 
you can use MVC and express but I
 
wouldn't call it an MVC framework now
 
fastify has been gaining in popularity
 
it's a very high performance web
 
framework and it's known for its speed
 
and low overhead it's often used for
 
building apis and microservices it's
 
very similar to express and syntax and
 
it's also very minimalistic now the next
 
two Frameworks for node.js are feature
 
packed you have you have Adonis and Nest
 
JS and with both of these
 
you get more out of the box you're going
 
to write less code but it is they are
 
more opinionated and you have to follow
 
certain conventions Adonis actually
 
reminds me a lot of laravel's PHP
 
framework so if you've ever used laravel
 
if you like that framework and you're
 
looking for a back-end JavaScript
 
framework then Adonis might be for you
 
it's MVC based you have database
 
migrations models controllers template
 
engines and more now Nest JS not next
 
but Nest JS is another full featured
 
back-end framework and it actually uses
 
typescript out of the box and in my
 
opinion it feels a lot like angular so
 
it feels like angular on the back end
 
just the way you set up controllers and
 
so on feels very similar so I think that
 
angular with Nest js on the back end can
 
be a very powerful stack combo and Ness
 
is actually built on top of Express but
 
you can also configure it to use fastify
 
so there's a lot of other node.js friend
 
works but these are the ones that I'd
 
recommend so I gave you two great
 
minimalistic Frameworks and then two
 
higher level more opinionated ones all
 
right so python has some great
 
Frameworks as well so Django is another
 
one of my favorite Frameworks it's very
 
opinionated it's full featured it allows
 
you to build complex web applications
 
with very little coding because there's
 
so much out of the box in fact there's
 
so much included that you can actually
 
use Django Without Really knowing the
 
Python language you can just look at the
 
docs and follow the standards and
 
conventions and there's database
 
migrations routing there's even a
 
complete admin area when it comes to
 
your your models so let's say you're
 
creating a Blog and you create a post
 
resource or a post model a category
 
model you can just put in a couple lines
 
of code and those will show up in your
 
admin area and you can then manage your
 
blog posts your categories you have
 
complete crud functionality so there's
 
just a ton that comes out of the box
 
with Django I actually created a course
 
on Django a few years ago where we built
 
a real estate website and I do have that
 
course available but I it does need to
 
be updated and I will be updating it
 
this year
 
so flask is another awesome framework
 
from python but I would say it's the
 
complete opposite of Django because it's
 
very minimalistic in fact I often
 
compare flash to express just the way
 
that you create routes the way that you
 
use middleware is very similar so if you
 
want a framework where you have a lot of
 
freedom and you don't you know you want
 
to bring other packages in and stuff
 
like that then flask is a great python
 
framework and then I wanted to put fast
 
API in here because it's really gaining
 
in popularity and like the name says
 
it's very fast and it's used to build
 
apis so the performance is actually on
 
par with node.js and golang it also
 
includes features that allow you to
 
write code really fast so it's robust
 
and it's production ready it's it's
 
worth a look if you're into Python and
 
you're looking to create web apis
 
so next we're going to look at PHP and
 
laravel is definitely
 
the most popular framework when it comes
 
to PHP and it's really popular just in
 
general it was first released in 2011
 
and has it's gained a large following
 
due to its robust features as well as
 
its elegant syntax and ease of use so a
 
lot of people complain that PHP is a
 
messy language and I can agree that if
 
you're using vanilla PHP then it can get
 
quite messy you can get a lot of what's
 
called spaghetti code but laravel is
 
just so clean and elegant even people
 
that bash PHP seem to think laravel is a
 
great framework it offers a wide range
 
of built-in tools and features it has a
 
really powerful orm which is an object
 
relational mapping system it has
 
built-in authentication support for
 
database migrations and laravel also has
 
a really large active community of
 
develop developers so definitely my pick
 
when it comes to PHP and definitely in
 
my top five Frameworks of of out of
 
everything
 
symphony is another PHP framework but in
 
addition to being a framework it also
 
provides a wide range of reusable
 
components in fact laravel actually uses
 
several Symphony components for things
 
like HTTP and routing so symphony is a
 
it's a very decoupled framework which
 
means every part of the framework can be
 
used separately in other projects so
 
it's extremely powerful but it does have
 
a much higher learning curve at least in
 
my opinion and I've seen quite a quite a
 
bit of symphony in the Enterprise world
 
so if you're a beginner I don't think I
 
would suggest using Symphony over
 
something like laravel but that's just
 
me everyone's different so next we have
 
my first MVC framework ever actually my
 
first framework ever that I learned and
 
that's codeigniter so so my first real
 
complex application was created with
 
this framework and I used it throughout
 
my freelancing career to build things
 
like social networks e-commerce websites
 
a Content management system so it kind
 
of has a special place in my heart the
 
encoding Knight of four was in
 
development for years in fact I thought
 
the framework was completely dead but in
 
2021 the stable version of the stable
 
version 4 was released and I think it's
 
a great framework especially for
 
beginners I think it's a good
 
introduction to MVC where it doesn't it
 
doesn't do too much for you you know I
 
think with with laravel as great of a
 
framework as it is it does a lot for you
 
where codeigniter makes you do more of
 
the work but you also start to
 
understand how MVC Works a little better
 
if I don't know if I put that into the
 
right the right words but yeah I mean it
 
has a light footprint good performance
 
and again it's easy to use not the most
 
popular thing in the world but I like it
 
so I also wanted to mention slim PHP
 
which is very minimalistic and reminds
 
me of of Express only for PHP so if your
 
goal is to create apis and you don't
 
need anything really full featured and
 
you want to structure your projects
 
however you want slim PHP may be a good
 
option in fact I think that it it Brands
 
itself a micro framework
 
now if you're doing web development and
 
using the Ruby language there's a huge
 
chance that you're going to be learning
 
or using Ruby on Rails and I said it
 
before and I'll say it again I think
 
rails is one of the best Frameworks ever
 
created it's amazing for Rapid
 
development you can spin up a crud
 
application connect to a database in
 
literally minutes and it has incredible
 
scaffolding tools migration tools the
 
code is Ruby so it's very elegant and
 
easy to understand Ruby on Rails is big
 
on the dry principle which is don't
 
repeat yourself it is very opinionated
 
probably one of the most opinionated
 
Frameworks and it's it uses convention
 
over configuration so I think this
 
framework can be great for Freelancers I
 
did quite a few rails projects when I
 
was freelancing as far as Jobs go they
 
definitely have declined over the last
 
10 years but they are still out there
 
and again I said it earlier there's not
 
as many Ruby developer as as there are
 
node.js or python developers so you do
 
have a decent shot at the jobs that are
 
available
 
now in addition to Ruby on Rails you
 
have the Sinatra framework which is a
 
good alternative to rails because it's
 
very minimalistic and rails is very
 
opinionated so Sinatra actually calls
 
itself a micro framework so it's good
 
for you know smaller apis things like
that
that
 
that
 
so golang it has a very extensive
 
standard Library I think I mentioned
 
that in the last slide so you can do a
 
lot without a framework but there are
 
still Frameworks available so jyn is
 
probably the most popular golang
 
framework at this time it's used to
 
create modular and scalable web
 
applications it has a very similar
 
syntax to Django and it's a great
 
framework for smaller personal projects
 
as well so next we have bego which
 
allows for fast creation of back-end web
 
apps as well as rest apis again this is
 
similar to Django and it's a
 
full-fledged MVC framework and it
 
integrates an orm easily to query a
 
database and it comes with command line
 
tools that work again similar to djangos
 
and then Echo is a high performance
 
minimalistic framework for go and it's
 
popular for building micro servers and
 
useful apis and it has an optimized
 
router data binding and rendering
 
capabilities as well as templating
 
so let's move into Java so spring is
 
very popular in Java world it's a
 
programming model and ecosystem and has
 
several parts to it including the spring
 
MVC framework which is used to create
 
web applications and it seems to be
 
Java's version of of c-sharp's asp.net
 
MVC and I find that there's a lot of
 
similarities between Java and c-sharp so
 
if you're a Java developer and you're
 
getting into web development chances are
 
you're going to learn spring and this
 
this just like any other Java technology
 
is used a lot in the Enterprise world
 
and then struts is another framework
 
that Java uses it was developed by
 
Apache and it's used for large
 
applications and has a great community
 
and there's all kinds of plugins that
 
you can use with struts it comes with
 
comes with some plugins for things like
 
Json and rest API development
 
and then blade both spring and struts
 
are used for larger projects so I want
 
to mention blade which is suitable for
 
smaller and personal projects with Java
 
and blade focuses on Simplicity and also
 
has tools for security now as far as
 
calling goes kotlin can also use spring
 
as a version 5.0 so it's a popular
 
choice for kotlin users Javelin is a
 
very lightweight framework for kotlin
 
and can be used for smaller applications
 
it's designed to be simple and blocking
 
but also can be configured to to be
 
asynchronous and it supports open API it
 
runs on top of jetty which is one of the
 
most stable web servers on the jvm or
 
the Java virtual machine we also have
 
ktor which is another lightweight
 
framework by jet brains that is reliable
 
and stable
 
when it comes to C sharp we have
 
obviously the.net framework we have
 
asp.net core which is a cross-platform
 
general purpose framework obviously it
 
uses.net and it's high performance high
 
scalability it's great for large
 
applications and then you have asp.net
 
MVC which is built on top of asp.net and
 
it's specifically for web applications
 
and obviously it implements the model
 
view controller design pattern so using
 
c-sharp with asp.net is a reliable and
 
elegant solution for full stack web
 
development and there's plenty of jobs
 
for it and then finally for rust we have
 
the Rockets framework which allows you
 
to create fast and secure web apps and
 
it's a type safe framework I looked at
 
some of the syntax when it comes to
 
writing routes and creating an API and
 
it seemed pretty clear and easy to
 
understand I've never used it personally
 
but I did take a quick look at it all
 
right so now we're going to look at some
 
database options and no matter which
 
language of framework that you use
 
you're going to be dealing with some
 
kind of database if you're building full
 
stack applications or back-end apis now
 
there's different types of databases and
 
I and just like with anything else in
 
web development there's no clear best
 
option the two main types are relational
 
databases and nosql databases so I just
 
want to quickly go over some points for
 
each of these as they're the just like
 
with anything there's pros and cons and
 
there's different situations where one
 
may be more beneficial than the other so
 
relational databases have been around
 
since the 70s they've been around a long
 
time and this can be a good thing
 
because we know what they're capable of
 
there's lots of knowledge and support
 
out there they use a traditional table
 
structure or table based structure with
 
columns and rows so you can kind of
 
think of like an Excel spreadsheet most
 
relational databases is use SQL which is
 
structured query language which if
 
you're going to be a back-end developer
 
you should definitely learn I wouldn't
 
say it's as hard as learning a regular
 
programming language there's not as much
 
to it so learning the basics can be done
 
pretty quickly now as the name implies
 
these are great for relationships or
 
related data so let's say a social
 
network where you have users and posts
 
friends photos and just a whole bunch of
 
data that can be related to each other
 
so relational databases are also very
 
strict and rigid when it comes to the
 
structure you basically need to create
 
your tables and then all your Fields
 
even the type that that of data that
 
that field is going to hold before you
 
do anything within your application so
 
this can be a pain to deal with but then
 
again it does promote consistency
 
security and reliability they're also
 
really good with complex queries that
 
involve multiple tables and so on so no
 
SQL or no SQL School databases are a
 
newer type of database and there's
 
actually many different types of nosql
 
databases you have document databases
 
column based key value stores and
 
there's there's a lot more but I'll
 
mostly be talking about document
 
databases as they seem to be the most
 
popular so data gets stored in the form
 
of a document which is basically a Json
 
object so they're stored in collections
 
so you have collections of documents
 
which again are essentially just Json
 
objects key value pairs one thing about
 
nosql databases is they're very very
 
flexible and schema-less so you don't
 
have to go and Define all your your
 
fields and all your types and stuff like
 
that at the database level you can do
 
that through your application through an
 
orm or an odm object data mapper but you
 
don't have to do it at the database
 
level like you do with a relational
 
database all right so there are also
 
very very scalable and you store massive
 
amounts of data they're not so good with
 
complex queries though so if you have
 
complex queries and lots of related data
 
you may want to use a relational
 
database and if you have data that is
 
fairly simple in terms of structure but
 
you have tons and tons of it then you
 
may want to choose nosql but I will say
 
that in in most projects especially
 
small to intermediate projects you could
 
use either one all right so now we're
 
going to get into the actual database
 
Management systems or dbms's so we're
 
going to start with the relational ones
 
and then we'll move to nosql and then
 
we'll also look at some other types as
 
well Cloud databases file based Etc so
 
postgres or postgresql or postgres SQL
 
however you want to pronounce it is a
 
relational database that has intuitive
 
functionality and versatile security so
 
it's also known as an object-oriented
 
database this makes it easy to work with
 
complex data mod models and
 
relationships and it provides a more
 
intuitive way to interact with the
 
database so when I started web
 
development everyone was using MySQL or
 
MySQL however in the past few years
 
postgres has really came up in
 
popularity so it's really popular for
 
startups and it's used by companies like
 
apple Skype Etsy and Cisco so next we
 
have MySQL or MySQL it's another popular
 
relational database system especially in
 
web development and it was the first
 
database that I personally had
 
experience with it's very popular in PHP
 
world so you have the lamp stack which
 
stands for Linux Apache MySQL and PHP
 
and that was huge when I was learning
 
web development and it's also used with
 
large companies like Google udemy
 
Netflix and Amazon now Oracle is a
 
popular commercial relational database
 
system that's used in the Enterprise
 
level applications so it's known for its
 
reliability scalability and security and
 
it handles complex data sets really well
 
now you probably won't see Oracle used
 
much in the smaller to medium-sized
 
projects or startups it's more of a Big
 
Business Solution it's used by Amazon
 
American Express Verizon and many other
 
big companies
 
then we have Microsoft's implementation
 
of SQL which is Ms SQL or mssql again
 
like Oracle it's used in a lot of big
 
business it's a commercial solution
 
although there is a free tier with
 
limitations and it's used by companies
 
such as Bank of America UPS JPMorgan
 
Chase and so on so all four of these are
 
similar when it comes to managing data
 
via SQL structure query language there
 
are variations of the language but it's
 
pretty easy to transition from one to
 
another
 
all right so now we're going to look at
 
some nosql databases or nosql I know a
 
lot of people give me crap for saying
 
SQL but mongodb is probably the most
 
popular one it's a document database and
 
like I said data stored in documents
 
which are formatted like like Json
 
objects in fact mongodb uses something
 
called Beeson which is a or bson which
 
is a superset of Json and I think one
 
big reason why is so popular in
 
the JavaScript world or node.js world is
 
because it's structured literally like
 
Json like JavaScript so it's really easy
 
to work with and it's nice to have that
 
type of structure in your your full
 
stack JavaScript application
 
mongodb is very scalable and of course
 
you can use mongodb with other languages
 
as well it's not just with node.js with
 
JavaScript all right and I'm going to
 
talk more about mongodb Atlas in a
 
minute which is a cloud database now if
 
you are going the nosql route I'd
 
probably say stick with mongodb just
 
because it's so much more common than
 
these other examples especially in web
 
development with someone smaller to to
 
more to medium-sized projects but some
 
examples of other nosql databases are
 
Cassandra which is a column based
 
database it is highly scalable and
 
flexible as are most nosql databases and
 
it's used by companies like apple it's
 
actually used with iCloud hosting
 
Twitter uses it to store and manage data
 
and then eBay uses it I believe for
 
analytics couchbase is another document
 
database similar to mongodb it's
 
designed to handle really large amounts
 
of unstructured or semi-structured data
 
I believe LinkedIn uses couchbase for
 
its notification system we also have
 
Amazon's dynamodb which is an
 
implementation of Dynamo and it's a
 
fully managed document date database and
 
key value store and it's built for
 
scalability and performance some
 
companies that use it of course Amazon
 
also Netflix and Airbnb now I will say
 
that most of these nosql databases with
 
maybe the exception of mongodb are
 
really built for really really large
 
data sets so if you're creating a
 
personal blog you're probably not going
 
to use couchbase you're probably going
 
to use something like postgres MySQL or
 
even mongodb
 
so now I want to look at serverless or
 
Cloud databases these are extremely
 
popular in 2023 and Beyond these are
 
databases that are obviously hosted in
 
the cloud so you don't have to install
 
and manage them on your own server and I
 
think that this is the general direction
 
that we're going in when it comes to
 
data they provide scalability
 
flexibility and you don't have to worry
 
about the infrastructure and the
 
maintenance so we'll start off with
 
mongodb Atlas which is the cloud version
 
of mongodb and it's actually what they
 
suggest using over you know a local
 
implementation and as with the rest of
 
these options there's a very generous
 
free tier and then it's pay as you go
 
once you go into production if it's you
 
know more than just a simple personal
 
website or something like that then
 
you'll you just pay as you go and it's
 
great because you can set up your
 
development database while you're
 
developing and then just switch to your
 
production database when you deploy and
 
it's as easy as just swapping out the
 
database string in your back end you
 
don't have to do any extra installations
 
or any work on a server or anything like
 
that it's very secure you can make it so
 
that only your development IP and your
 
production server IP can access it you
 
can access your data via the browser but
 
there is a much more intuitive desktop
 
app called mongodb Compass if you want
 
to manage your data directly you know
 
right in the database not through any
 
application
 
so next we have Firebase which is owned
 
by Google and offers a real-time nosql
 
database as well as a lot more it's
 
actually an entire platform so it offers
 
things like authentication file storage
 
serverless functions so it's essentially
 
an entire platform for building
 
applications and it's great for small to
 
medium-sized projects the one downside
 
is that you are tied into Google's
 
architecture for everything if you do
 
use Firebase now another option that you
 
have which is very similar to Firebase
 
is Super Bass and Super Bass is really
 
blown up in 2022 and 2023 so it's
 
essentially a back end as a service so
 
again you don't have to install or
 
manage any databases it does offer
 
authentication there are some
 
differences with Firebase versus Super
 
Bass Super Bass is actually built on top
 
of a postgres database while Firebase is
 
built on top of a nosql database another
 
important thing to mention is that super
 
bass is not a proprietary piece of
 
software like Firebase so since it's an
 
open source project that uses an open
 
source database postgres then you're not
 
locked into any one particular vendor
 
like you are with Firebase in Google
 
now fauna DB is another one that I've
 
seen a lot of this past year what's cool
 
about fauna is that they offer both
 
nosql and relational data models and
 
they also provide Advanced features such
 
as support for acid transactions they
 
have native support for graphql as well
 
and then AWS also offers a lot of
 
options there's RDS which is Amazon's
 
relational data service where you can
 
have a postgres database in the cloud
 
that's something I've used a few times
as well
as well
 
as well
 
now I want to talk a little bit about
 
file based databases which are used for
 
very small projects so if you have like
 
a personal website with a directory of
 
Staff members or you have a simple blog
 
or something like that sometimes using
 
postgres or mongodb can be Overkill so
 
one of these options is much less
 
overhead and less work for you so SQL
 
Lite is very common it's actually uses
 
the default in many backend Frameworks
 
such as laravel and Django it doesn't
 
take any work to set up you simply have
 
to create a file called database.db or
 
whatever there's also desktop apps and
 
and editor plugins that you can use to
 
go in and View and manage your data in
 
an sqlite database now I put mock down
 
here or markdown files which is
 
definitely not a database however
 
markdown files are a good replacement
 
for a database for really small projects
 
such as personal blogs so I created a
 
Blog not too long ago for a friend and I
 
used Gatsby which is a static site
 
generator along with markdown files and
 
they love it and you know you do have to
 
go in and edit markdown and create new
 
files but once you know how to do that
 
it's it's simple we also used them in my
 
next JS course for the devspace blog
 
project
 
so another option is H2 H2 is a
 
lightweight open source database that
 
uses a file based format it supports SQL
 
and provides a web-based console for
 
managing data now I put redis here
 
although its primary use is more for
 
caching it's more of an in-memory
 
database however it does have the
 
ability to persist data Beyond memory
 
and write it to disk so redis may be
 
something you want to look into for
 
caching it can really increase
 
performance and it's not very hard to
 
implement all right so there's a ton of
 
options out there but don't let it
 
overwhelm you just try things out see
 
what works for the see what works the
 
best for you
 
all right so we're going to talk a
 
little bit about orms or object
 
relational mapping these are programs
 
that we use as a layer of abstraction
 
over the actual database so it provides
 
a way for us to interact with our
 
database from our code or from our
 
application without having to write raw
 
SQL queries which can be kind of a pain
 
in the ass so it simplifies data
 
interaction it increases productivity it
 
also keeps our application independent
 
of the database so if you wanted to
 
build an app around let's say MySQL and
 
use an orm like sqlize you could then
 
later on Swap MySQL for postgres if you
 
wanted to and not have to change
 
anything except maybe some configuration
 
options all right so certain orms
 
support certain databases I'm going to
 
go over some of the popular choices that
 
you may run into I also want to mention
 
that certain Frameworks have built-in
 
orms as well for for example laravel
 
uses an orm called eloquin which is
 
fantastic so some other ones are Prisma
 
which is extremely popular right now
 
it's a type safe client that supports
 
just about all all the popular databases
 
like postgres MySQL mongodb even SQL
 
Lite and some others so it has an
 
extremely easy to use API it can handle
 
relationships it has advanced pagination
 
and many other features so if you need
 
just a general orm or database client
 
that's what I would suggest now if you
 
happen to be using node.js with mongodb
 
Mongoose is an incredible tool for
 
connecting and interacting with your
 
mongodb database like I said nosql
 
databases don't need to be structured at
 
the database level but Mongoose allows
 
you to do all that from your application
 
layer using models and schemas so and
 
there's also support for middleware
 
which makes it very customizable and
 
then sequelizes an orm for node.js but
 
for SQL databases so it supports all the
 
common ones it also has database
 
migration capabilities you can create
 
models just like you can with Mongoose
 
there's a concept of hooks which you can
 
use to to manage or hook into life cycle
 
events that's really popular for node.js
 
now to step out of the JavaScript World
 
SQL Alchemy is an orm for python that
 
works with common SQL databases and it
 
has a rich API for making complex
 
queries now there's obviously a lot more
 
for many other languages for instance
 
Doctrine is a popular PHP orm you have
 
hibernate for Java and many more so I
 
can't go over all of them unfortunately
 
this video is getting way way too long
 
but I want you to know that there's just
 
tons of these out there so just
 
experiment see what works
 
all right so when we create a backend
 
API there's a couple approaches that you
 
can take two of the most common uh rest
 
apis and graphql now rest stands for
 
representational State transfer and it's
 
a software architecture style for
 
building scalable and flexible web
 
services now you should really be
 
familiar with rest if you're already a
 
front-end developer because you should
 
be able to consume rest apis from the
 
client and this knowledge will help you
 
when it comes to creating them as well
 
so rest is the traditional client server
 
model and it's much more common than
 
graphql and it uses specific HTTP
 
methods and endpoints or URLs which are
 
formatted in a certain way now with rest
 
you can fetch data from a route so let's
 
say whatever mywebsite.com API slash
 
posts so you would fetch all the blog
 
posts from that specific endpoint or
 
that URL and then you would get all all
 
the data back from from that endpoint
 
and you could use any language any
 
server side language in any database you
 
could create a rest API with node.js and
 
mongodb or with Java and MySQL or
 
whatever language you want now graphql
 
is a bit different so graphql is a query
 
language and runtime for apis and it
 
allows clients to request the exact data
 
they need in a single request and it
 
uses a flexible and expressive query
 
language so this can lead to performance
 
improvements especially for mobile and
 
web applications with rest well let's
 
say you have a an app where a user can
 
create read update and delete blog posts
 
so you would have four separate URLs or
 
four separate endpoints to hit on the
 
back end to commit any of those actions
 
and if you wanted to get a blog post you
 
would have to fetch every field in that
 
post the title The body the date the
 
user or author all the fields you get
 
back with graphql you have one single
 
endpoint which is just slash graphql and
 
instead of making a standard HTTP
 
request you make a query which looks a
 
lot like Json and you can specify well I
 
want just the title and the body from
 
the blog post from with it with this ID
 
so you can specify exactly what you want
 
where with rest it's more All or Nothing
 
All right so that does increase
 
performance and there's there's a lot of
 
Pros to that but graphql is also harder
 
to set up it's another layer that you
 
have to worry about you can use graphql
 
with a rest API they're not mutually
 
exclusive but with that said I think
 
that learning restful apis it's
 
mandatory for full stack and and
 
back-end developers graphql is it's a
 
nice technology to know it can help you
 
out maybe get you jobs that you couldn't
 
get otherwise but it's not something
 
that I think is mandatory right now all
 
right so a big part of web development
 
in general is authentication and
 
authorization so for beginners that
 
don't understand the difference
 
authentication is the process of
 
identifying an individual so a user logs
 
in they validate their identity that's
 
authentication authorization pertains to
 
the permission that that individual has
 
so just because someone's authenticated
 
and logged in doesn't mean that they can
 
do whatever they want and go into like
 
admin areas and start to edit content
 
and all that so for that you usually
 
have some kind of role system with
 
authorization now as far as how to
 
implement this stuff there's a lot of
 
different ways to do it so the
 
traditional approach is to use sessions
 
and cookies this is where the server
 
maintains a session for each user that's
 
authenticated and stores a session ID in
 
a cookie on the client side and that
 
session ID is used to retrieve the user
 
information from this server on
 
subsequent requests and it will infer
 
enforce any authorization rules so if
 
you're using a full server-side solution
 
like let's say laravel with blade
 
templating this is really easy because
 
the framework and maybe an extra package
 
or two gives you the the tools that you
 
can use to implement this now when we
 
start looking at server I'm sorry single
 
page applications and having a lot of
 
the app rendered on the client it does
 
get a little bit more difficult and one
 
solution for this is is Json web tokens
 
or token based authentication so
 
basically we create an endpoint on the
 
back end for the user to authenticate
 
with a password and if they pass if they
 
validate or authenticate then they get a
 
token and this is typically a Json web
 
token and usually has the user's ID
 
encoded with it and then that gets sent
 
back to the client and then anytime the
 
client wants to access a protected route
 
they can send that Json web token with
 
the request and then it's validated on
 
the server okay so that's one way to do
 
it now you also have things like you
 
have oauth which is a simpler solution
 
it's an open standard for authentication
 
used by many services like Google
 
Twitter Facebook it allows it allows
 
users to Grant third-party applications
 
access to their data without sharing
 
their you know their username password
 
and any sensitive data so I'm sure
 
you've been on Plenty of websites where
 
you can log in with Google or Facebook
 
Twitter GitHub so that's that's usually
 
oauth now to make it even easier there
 
are third-party services such as auth
 
zero that use the oauth standard to give
 
you an identity management solution that
 
provides authentication and provides
 
user management and security features so
 
with auth zero for example you can
 
integrate authentication with Google
 
Facebook LinkedIn so it just makes it a
 
little bit easier and that's probably
 
what I would recommend starting with so
 
chances are you'll have to learn a few
 
different ways to implement this stuff
 
these I would say are the most common
 
some other things that have to do with
 
security and authentication that you'll
 
be learning about our password hashing
 
obviously you can't Store Plain text
 
passwords in a database so they have to
 
be hashed and you'll probably want to
 
look into two-factor authentication I
 
think that in the future two-factor
 
authentication is going to be a must on
 
most websites it kind of is now but I
 
think it's gonna it's gonna be even more
 
common and then protecting routes in
 
your apis using middleware things like
that
that
 
that
 
all right so when it comes to deploying
 
a full stack project or an API it's a
 
bit different than deploying a basic
 
front-end website because you you can
 
pretty much host a front-end site
 
anywhere it's put on a server it's
 
delivered to the client but server-side
 
applications need a server to execute
 
your code and that code could be in one
 
or more different programming languages
 
so there's two main categories when it
 
comes to these Services you have a pass
 
which is a platform as a service and
 
this is where pretty much everything is
 
done for you you don't have to provision
 
a server install nginx and firewalls and
 
all that all you really have to do is
 
push your code to something like GitHub
 
and then select the repo from within the
 
platform much like you do with netlify
 
or versl so then you have unmanaged
 
Cloud hosting which is where you
 
essentially rent out a Linux box and you
 
can install whatever you want on it any
 
Linux disk draw any programs you want
 
whatever you set up nginx and your web
 
servers and all that but of course
 
that's much more difficult so I'll start
 
with the platforms as a service so
 
render.com is what I would suggest using
 
it's super easy you can host node.js
 
python Ruby Rost golang just about any
 
modern programming language and it's
 
simple to deploy it's it's very similar
 
to how netlify works at least from from
 
the user-facing
 
website they also have a very generous
 
free tier if you want to try it out now
 
Heroku is a platform as a service that
 
I've used for a long time and I've used
 
them a lot in courses and videos because
 
they did have a very nice free tier that
 
you could use for testing and stuff like
 
that however they stop that free tier in
 
2022. now don't get me wrong I still use
 
Heroku personally but I need a free tier
 
for courses because not everyone's going
 
to pay for a Hosting account when
 
they're just taking a course and they're
 
learning and they're testing things out
 
so now I kind of ship everybody to
 
render.com for courses and and tutorials
 
but Heroku is a good service and it's
 
it's a little bit more difficult than
 
render but it's much easier than you
 
know using uh just a cloud host now if
 
you do want to use cloud hosting there's
 
a few companies that offer this lenode
 
is one that I've worked with for years
 
they're great digital ocean there's a
 
company called vulture and they're
 
they're all pretty similar they all have
 
basically a portal that you can log in
 
and you pay as you go you can install
 
whatever you want including the
 
operating system you can choose your
 
Linux distro and you have to set
 
everything up from scratch so you'll be
 
installing your web servers and you'll
 
be installing node.js or python or
 
whatever ever it is that that your back
 
end is using so this does take more
 
knowledge obviously but it also gives
 
you a lot more freedom so I did want to
 
mention AWS here because it does have
 
some amazing services that host some of
 
the largest applications and Platforms
 
in the world however for me it's it's a
 
bit Overkill so anything that I build is
 
fine with other solutions that I
 
mentioned I'm not really an AWS guy I
 
log in and I don't really know what the
 
hell I'm doing other than creating some
 
S3 buckets for some images or something
 
like that so it's it's really not for me
 
I know a lot of people really like it
 
Azure is a similar platform by Microsoft
 
which I have no experience with so I
 
can't say much about other than these
 
are really really powerful services with
 
powerful infrastructures that host
 
really really large applications
 
all right so in addition to hosting
 
there are some other Technologies around
 
deployment devops storage and so on that
 
you may want to look to as a developer
 
and definitely as a devops engineer if
 
you plan on going that way I'd say that
 
most of these are optional aside from
 
the terminal I think that if you're a
 
full stack or back-end developer you
 
should be very comfortable with you know
 
unix commands you should be able to use
 
a bash shell or Z shell I should be able
 
to navigate the system create and open
 
files Etc and be familiar with SSH so
 
you can interact with your servers and
 
so on now if you use something like
 
render or Heroku you don't have to worry
 
about setting up web servers but you
 
should have at least an introductory
 
level of knowledge on either Apache or
 
nginx those are the two very popular web
 
servers Apache has been widely used
 
since the 90s and it's really popular in
 
PHP nginx is a more modern web server
 
designed for high performance and
 
scalability and it's used a lot for
 
modern application and microservice
 
architectures so having a basic
 
understanding of how these work and also
 
some of the the major config files is
 
definitely a plus now another technology
 
you may get into especially if you're
 
getting into devops is containerization
 
so this is where you package your
 
project and its environment in in any
 
dependencies it has including server
 
software databases languages and
 
anything else into what are called
 
containers and then your container can
 
run on any machine and it will run the
 
same exact way because it's running in
 
the contained environment which is going
 
to be the same on every machine so this
 
is very beneficial if you're on a team
 
and you have projects that have to run
 
on multiple machines and Docker is
 
definitely the the containerization
 
platform that you're going to most
 
likely be run into if if this is
 
something that you're going to do there
 
are some others like vagrant but Docker
 
has really shined in this area and then
 
you have kubernetes which you can use to
 
manage your containers now if you're a
 
beginner or a freelancer or someone that
 
mostly works by yourself I don't think
 
you need to get into Docker or anything
 
like that but it is great for
 
collaboration where your development
 
environment has to be a certain way on
 
multiple machines
 
all right so you're going to have assets
 
like images documents videos Etc where
 
you need to store them somewhere and
 
you're not going to use GitHub to store
 
hundreds or thousands of images so
 
there's all kinds of services for stuff
 
like that I really like cloudinary it
 
stores your media but it also optimizes
 
it it creates multiple versions of it so
 
you may have a large version for
 
desktops large image and smaller
 
versions for tablets and smartphones and
 
you get a nice API with all the image
 
URLs so you can integrate that into
 
different platforms really easily in
 
fact in my next JS course we integrate
 
Cloud Nary into the strappy headless CMS
 
so Amazon S3 is a storage service that's
 
part of Amazon web services probably the
 
only part of it that I use and you can
 
use that to integrate into your projects
 
pretty easily as well and there's all
 
kinds of libraries for node.js or
 
whatever you're using now the last two
 
I'm not very familiar with cicd stands
 
for continuous integration and
 
continuous deployment and this is more
 
towards the devops side of things so it
 
involves continuously merging and
 
testing code changes from multiple
 
developers into a shared code repository
 
so it's it's more to ensure that code
 
changes are compatible and they can be
 
integrated into the code base without
 
causing issues and there's tools to help
 
with this like Jenkins Travis CI Circle
 
CI but I don't have any personal
 
experience with them the next one
 
infrastructure is code or IAC I don't
 
really know much about either it's more
 
devops and but it involves writing and
 
maintaining infrastructure as code using
 
tools like terraform cloud formation and
 
palumi all right so we've gone over a
 
ton and I'm sure that some of you are
 
overwhelmed just know that you only have
 
to learn a very small portion of what
 
we've talked about and the the reason
 
that I mentioned so much in these these
 
guides is to show you all of the options
 
a lot of people on YouTube they'll
 
they'll have you think that the only
 
thing out there is like JavaScript and
 
being a merge stack developer but
 
there's a lot more out there and you'll
 
find out when you start looking for jobs
 
so we talked about a lot but as far as
 
what you absolutely need to know you
 
need to know a server-side programming
 
language or technology obviously node.js
 
is not a language but it's a server-side
 
technology so you're fine with that
 
you're fine with just about any other
 
language especially the languages that
 
we talked about you definitely want to
 
look around in your area and see what's
 
really popular in terms of the the jobs
 
that are offered all right so a language
 
a framework so you want to know a
 
server-side framework in that language
 
the fact is you're just good you're
 
going to be using a framework why
 
reinvent the wheel you're not going to
 
just do everything from scratch so
 
Frameworks are they make things a lot
 
easier and there more secure than if you
 
were to just use vanilla code and
 
there's a lot of a lot of advantages to
 
it so databases and orms so you should
 
have some experience with either a
 
relational or mySQL database even
 
something like Firebase or Super Bass
 
you should know how to implement that
 
database within your code including
 
connecting and querying it okay you
 
should probably know at least the basics
 
of SQL structured query language if
 
you're using a relational database
 
you're probably going to learn some kind
 
of orm to use within your code something
 
like like sqlize or mongoose or or SQL
 
Alchemy something like that so you're
 
not writing raw SQL queries
 
so you should be friendly with the
 
terminal as a full stack developer you
 
should be able to navigate your system
 
on in a bash shell or a z-shell and run
 
you know Unix based commands so rest
 
apis you should fully understand HTTP
 
requests the whole request response
 
cycle how to create rest apis you should
 
also be familiar with authentication
 
including sessions and cookies even Json
 
web tokens or something like oauth and
 
then you don't have to know all the
 
devops stuff we talked about I certainly
 
don't you don't need to know Docker or
 
anything like that it is helpful but you
 
should at least know how to deploy your
 
projects to production and create an
 
environment for continuous deployment so
 
those are pretty much the bottom lines
 
for being either a back end or a full
 
stack developer obviously with full
 
stack you need the front end stuff we've
 
already talked about
 
okay so even though this is a web dev
 
guide there's web technologies that can
 
be used for other things such as mobile
 
development if you strictly want to be
 
into Mobile development then you might
 
learn something like Swift for iOS or
 
kotlin for Android apps but we do have
 
web technologies that allow you to
 
create cross-platform apps that you can
 
run on both IOS and Android so react
 
native is obviously a popular choice if
 
you're already familiar with react react
 
is a UI library and when we use it to
 
build web apps we use it along with a
 
library called react Dom so if you're
 
building a mobile app with react then
 
you're just not going to include the
 
react Dom Library instead you'll include
 
react native so you still have the
 
structure of components and state and
 
you get some added things as well
 
obviously
 
but when you build a react native
 
application it's going to run on both
 
iOS and Android and that that's a huge
 
Advantage because if you're using let's
 
say Swift to create a mobile app it's
 
only going to be on iOS if you want that
 
same application to run on Android
 
you're basically building a whole
 
separate app using Java or kotlin so
 
with these Technologies you have one
 
single code base you might have some
 
configuration to change around for each
 
platform but that's about it you still
 
have one single code base which is huge
 
all right so flutter is another
 
cross-platform mobile framework by
 
Google and flutter doesn't actually use
 
JavaScript it uses a language called
 
Dart which is very similar to JavaScript
 
so a lot of JavaScript developers do
 
actually go into learning flutter and
 
flutter is it's a bit faster than react
 
native because it doesn't have that
 
extra step of having the react native
 
Bridge flutter code actually compiles to
 
arm or Intel machine code as well as
 
JavaScript for for fast performance on
 
any device
 
now ionic is a framework that's been
 
around for a while and you could build
 
hybrid apps and Progressive web apps
 
with it and I'll talk about pwas in a
 
minute so ionic isn't going to be as
 
performant as react native or flutter
 
but you're also not bound to any
 
specific framework you can basically do
 
whatever you want you can use react view
 
angular Etc all right and ionic apps are
 
also cross-platform now we also have
 
xamarin which is a c-sharp framework for
 
building mobile apps so you can utilize
 
the.net framework it's very high
 
performance cross-platform as you can
 
see there's quite a bit that you can do
 
with c-sharp from Blazer to xamarin from
 
web to desktop c-sharp is something that
 
I've dabbled with but I want to get more
 
serious with it in the next in the next
 
year or so so that's one of my plans I
 
really like C sharp I've used it for
 
some small Windows utilities but never
 
really used it for for web development
 
so there's also a framework called
 
native script I don't have it on here
 
but it really hasn't went anywhere as
 
far as I can tell I know that it has had
 
some hardships including changes in
 
leadership and obviously competition
 
from other cross-platform Frameworks but
 
it is still actively maintained so
 
Progressive web apps will remain
 
relevant in 2023 in fact I think we'll
 
hear more about them they provide the
 
Best of Both Worlds both both mobile and
 
web experiences and pwas don't use any
 
specific framework but rather leverage
 
modern web technology such as responsive
 
design service workers web app manifests
 
https to provide an app-like experience
 
on the web and pwas are responsive
 
installable they're fast and they can
 
work obviously across multiple devices
 
and platforms so anyone that knows HTML
 
CSS and JavaScript can build Progressive
 
web apps there's just a few extra steps
 
that you need to add on from it being a
 
regular web app
 
now there are web technologies that you
 
can use to create high performance
 
desktop applications electron is an open
 
source JavaScript framework for building
 
cross-platform desktop applications they
 
run on Windows Mac OS and Linux and it's
 
a JavaScript framework and it basically
 
just takes care of the hot pots and lets
 
you focus on your applications
 
functionality so you can use any
 
front-end framework or library that you
 
want it comes with a native UI that runs
 
on all three platforms and before you
 
write it off as being some janky
 
JavaScript solution let's look at some
 
of the software that's been built on
 
electron so we have vs code atom which
 
is another great editor slack and
 
Discord which are I would say the two
 
most popular chat clients Skype which
 
you know is it used to be one of the
 
most popular OBS which is used widely by
 
streamers and content creators and even
 
Postman which is an HTTP client that we
 
use for for building apis and stuff and
 
that's just some of the the applications
 
that are built with electron so it's
 
extremely powerful
 
um I would say if you do want to use any
 
web technology to create desktop
 
applications and that's what you want to
 
use I did put some other stuff on here
 
though there's a framework called nwjs
 
previously known as node webkit and it's
 
similar to electron it's just not as
 
popular or as full featured it does let
 
you create native Windows Mac OS and
 
Linux applications I do have a tutorial
 
on nwjs as well as electron I actually
 
have a full udemy course on electron but
 
it is quite out of date that's why I
 
didn't move it to my platform
 
all right so with python you have a
 
bunch of different Frameworks you can
 
use to create GUI apps tkinter is one of
 
them that's pretty easy to use I believe
 
I have a tutorial on tkinter and then of
 
course you have you can build native
 
apps with languages like c-sharp and
 
Java but I think that that goes beyond
 
web development so that's why I'm not
 
really going to talk about that much
 
all right so next we have webassembly or
 
wasm which I've mentioned a few times
 
already so this is a binary instruction
 
format for browsers to run code more
 
efficiently than JavaScript and you can
 
use very low level languages such as C C
 
plus plus and rust so technically we're
 
able to build stuff that's much more
 
powerful than what JavaScript can give
 
us so it has it has been quite of a slow
 
rollout in my opinion I remember when it
 
was released people were saying that
 
JavaScript is going to die soon which is
 
very stupid you'd think people would
 
learn by now that that doesn't really
 
happen aside from HTML5 killing flash
 
which did seem to happen overnight at
 
least to me that doesn't really happen
 
much so webassembly made some strides in
 
2022 major browser vendors like Google
 
Mozilla and Microsoft continued to
 
invest in improving webassembly
 
performance and integration it's also
 
moved Beyond browser now with projects
 
in server side and mobile development so
 
I think we'll see more of webassembly as
 
the time goes on now as far as trends go
 
I think that we're on the same road that
 
we were last year but one thing I see
 
exploding in the near future is AI and I
 
talked about GitHub co-pilot and chat
 
GPT so these These are both tools from
 
open AI which is where I at least the
 
open source and open to the public
 
Cutting Edge AI stuff is coming from in
 
addition to those we have Dolly which is
 
a new AI system that can create
 
realistic art and images from just a
 
simple description in natural language
 
in fact my last tutorial on my channel
 
was building an app using Dolly so AI
 
powered databases we have tools like
 
mids DB which can merge the capabilities
 
of a database with machine learning
 
Frameworks and I think writing queries
 
with SQL will be a thing of the past in
 
the coming years I think that we'll be
 
able to talk to our database and just
 
say create a table whatever and not have
 
to be very specific just be able to do
 
it with natural language and voice
 
control
 
AI powered content so if you've used
 
chat GPT then you know how well AI can
 
put content together Jasper is an AI
 
tool for marketing copy and this is
 
something that Freelancers could use
 
with their services along with AI tools
 
for SEO
 
mintlify is an AI documentation writer
 
it can be installed as a vs code
 
extension so there's just so many new
 
tools that are coming out now that take
 
advantage of AI chat Bots are huge
 
obviously there's even chat Bots for for
 
like customer support for mental health
 
acting as counselors so I think that
 
creating chat Bots is going to be pretty
 
common for developers then of course we
 
have code generators so GitHub co-pilot
 
there's also tab 9
 
height there's a bunch of others as well
 
now I know a lot of people are scared
 
that there's not going to be any jobs
 
left in the future and I'm not going to
 
fully disagree with that uh there's a
 
whole that's a whole other video but
 
right now
 
and in the coming years use it to your
 
advantage I think that just sitting
 
around complaining about it isn't it's
 
not going to do you any good right now
 
you can use these tools to really help
 
you in in coding and in your everyday
 
life I mean I use chat GPT not only for
 
coding and solving issues there but also
 
just everyday issues if I need to fix my
 
my uh I actually used it to to help me
 
diagnose an issue with my water boiler
 
so I mean you can use it for anything
 
so this stuff is far from perfect but
 
this is the first year where I can
 
really see the potential of AI now I've
 
been talking about using AI for
 
development but you can also create Ai
 
and machine learning tools if that's
 
something you're interested in I would
 
suggest that you get into Python and
 
things like tensorflow Keras H2O there's
 
so many different python tools out there
 
that you can use for machine learning
 
but I would say that that that area of
 
programming is beyond web development
 
now let's talk a little bit about web3
 
so I think that last year I think web3
 
was over hyped just to the max I don't
 
think I've ever seen anything so over
 
hyped you know there there's definitely
 
potential in web3 and I think it's a big
 
part of our future but people were
 
acting like Web 2.0 was going to
 
disappear overnight and it was just pure
 
comedy just like webassembly it was
 
going to kill was going to kill
 
JavaScript Dino was going to kill
 
node.js you'd think people would learn
 
by now that things roll out much slower
 
in reality than they do in people's
 
heads on social media now with that said
 
I think that like I said web3 is going
 
to be a big part of our future and I
 
think learning blockchain development at
 
this point can be really valuable you
 
get a jump on it now so blockchain is a
 
distributed database that's used to
 
record transactions in a securely and
 
transparent way so it can be used to
 
create decentralized applications or
 
d-apps or dapps however you want to
 
pronounce it and these are applications
 
that are more secure and transparent
 
than regular traditional web
 
applications
 
so smart contracts are self-executing
 
contracts with the terms of of an
 
agreement between a buyer and seller and
 
they're directly written to lines of
 
code so they can be used to automate
 
complex transactions and reduce the need
 
for intermediaries and I think getting
 
into solidity which is a programming
 
language used to create smart contracts
 
can be very beneficial again especially
 
where this stuff is so new it's good to
 
get a jump on it so cryptocurrencies
 
such as Bitcoin and ethereum can be used
 
in in web3 applications to facilitate
 
transactions web 3 identity Solutions
 
such as viewport provide users with more
 
control over their personal data and it
 
enables them to securely interact with
 
decentralized apps so yeah I think that
 
getting into web3 is a good idea but
 
it's not something that you're going to
 
go and get a job with right now at least
 
as far as I know
 
all right so congratulations if you sat
 
through all that I commend you because
 
this was a long video it was way longer
 
than I anticipated and I apologize for
 
that but I wanted to just get all that
 
stuff out there there's there's a lot to
 
learn and I didn't want to just say well
 
this you know here's a friend the
 
front-end Frameworks react view angular
 
here's back-end Frameworks you know I
 
wanted to talk a little bit about each
 
thing so that you have an idea of what
 
what these this stuff actually is all
 
right so as far as choosing what you're
 
going to use don't let it overwhelm you
 
there's a ton of stuff here but like I
 
said you only need to learn a fraction
 
of it just try stuff out decide
 
um what you want to do and and that can
 
always change you might say well I want
 
to be a front-end developer but then a
 
year down the road you want to be a full
 
stack or even a back-end developer so
 
things change but just decide on what
 
you want to do right now at this moment
 
and find the best Technologies for that
 
and try try a couple things and see what
 
really clicks with you you know there's
 
always been technologies that I've used
 
where it just kind of comes quick and it
 
it's uh easy to pick up for me and then
 
there's some where I'm just like I don't
 
know what the hell I'm doing so you just
 
gotta find what works out for you all
 
right so that's it guys thank you so
 
much for watching I appreciate it and I
